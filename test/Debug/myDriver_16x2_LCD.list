
myDriver_16x2_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002084  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002248  08002248  00003248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002274  08002274  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002274  08002274  00003274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800227c  0800227c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800227c  0800227c  0000327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002280  08002280  00003280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002284  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  08002290  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08002290  0000405c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053f5  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001566  00000000  00000000  00009431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  0000a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003f6  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202a2  00000000  00000000  0000b306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d2f  00000000  00000000  0002b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c24b8  00000000  00000000  000332d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f578f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013b8  00000000  00000000  000f57d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f6b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002230 	.word	0x08002230

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002230 	.word	0x08002230

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <GPIO_SET_PIN>:
/**
 * @brief Sets the specified GPIO pin to HIGH state.
 * @param GPIOx Pointer to GPIO port (e.g., GPIOA, GPIOB)
 * @param GPIO_Pin Pin number to be set (e.g., GPIO_PIN_5)
 */
void GPIO_SET_PIN(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	807b      	strh	r3, [r7, #2]
	  assert_param(IS_GPIO_PIN(GPIO_Pin));
	  assert_param(IS_GPIO_PIN_ACTION(HIGH));
	  DELAY_US(1);
 800053c:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <GPIO_SET_PIN+0x50>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <GPIO_SET_PIN+0x54>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a10      	ldr	r2, [pc, #64]	@ (8000588 <GPIO_SET_PIN+0x58>)
 8000548:	fba2 2303 	umull	r2, r3, r2, r3
 800054c:	0c9a      	lsrs	r2, r3, #18
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <GPIO_SET_PIN+0x54>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	490d      	ldr	r1, [pc, #52]	@ (8000588 <GPIO_SET_PIN+0x58>)
 8000554:	fba1 1303 	umull	r1, r3, r1, r3
 8000558:	0c9b      	lsrs	r3, r3, #18
 800055a:	085b      	lsrs	r3, r3, #1
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <GPIO_SET_PIN+0x50>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	d8f8      	bhi.n	8000560 <GPIO_SET_PIN+0x30>
	  GPIOx->BSRR = GPIO_Pin;
 800056e:	887a      	ldrh	r2, [r7, #2]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	619a      	str	r2, [r3, #24]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000e010 	.word	0xe000e010
 8000584:	20000000 	.word	0x20000000
 8000588:	431bde83 	.word	0x431bde83

0800058c <GPIO_RESET_PIN>:
/**
 * @brief Resets the specified GPIO pin to LOW state.
 * @param GPIOx Pointer to GPIO port
 * @param GPIO_Pin Pin number to be reset
 */
void GPIO_RESET_PIN(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]
	  assert_param(IS_GPIO_PIN(GPIO_Pin));
	  assert_param(IS_GPIO_PIN_ACTION(LOW));
	  DELAY_US(1);
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <GPIO_RESET_PIN+0x54>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <GPIO_RESET_PIN+0x58>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a11      	ldr	r2, [pc, #68]	@ (80005e8 <GPIO_RESET_PIN+0x5c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	0c9a      	lsrs	r2, r3, #18
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <GPIO_RESET_PIN+0x58>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	490e      	ldr	r1, [pc, #56]	@ (80005e8 <GPIO_RESET_PIN+0x5c>)
 80005b0:	fba1 1303 	umull	r1, r3, r1, r3
 80005b4:	0c9b      	lsrs	r3, r3, #18
 80005b6:	085b      	lsrs	r3, r3, #1
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <GPIO_RESET_PIN+0x54>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8f8      	bhi.n	80005bc <GPIO_RESET_PIN+0x30>
	  GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	041a      	lsls	r2, r3, #16
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	619a      	str	r2, [r3, #24]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e010 	.word	0xe000e010
 80005e4:	20000000 	.word	0x20000000
 80005e8:	431bde83 	.word	0x431bde83

080005ec <LCD_init>:
void LCD_init( GPIO_TypeDef*  D4_GPIO, uint16_t  D4_PIN,
					  GPIO_TypeDef*  D5_GPIO, uint16_t  D5_PIN,
					  GPIO_TypeDef*  D6_GPIO, uint16_t  D6_PIN,
					  GPIO_TypeDef*  D7_GPIO, uint16_t  D7_PIN,
					  GPIO_TypeDef*  EN_GPIO, uint16_t  EN_PIN,
					  GPIO_TypeDef*  RS_GPIO, uint16_t  RS_PIN){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b092      	sub	sp, #72	@ 0x48
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	461a      	mov	r2, r3
 80005f8:	460b      	mov	r3, r1
 80005fa:	817b      	strh	r3, [r7, #10]
 80005fc:	4613      	mov	r3, r2
 80005fe:	813b      	strh	r3, [r7, #8]

	LCD.DATA4_GPIOx = D4_GPIO; // saving LCD parameters to base structure
 8000600:	4a8b      	ldr	r2, [pc, #556]	@ (8000830 <LCD_init+0x244>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6013      	str	r3, [r2, #0]
	LCD.DATA4_PINx  = D4_PIN;
 8000606:	4a8a      	ldr	r2, [pc, #552]	@ (8000830 <LCD_init+0x244>)
 8000608:	897b      	ldrh	r3, [r7, #10]
 800060a:	8093      	strh	r3, [r2, #4]

	LCD.DATA5_GPIOx = D5_GPIO;
 800060c:	4a88      	ldr	r2, [pc, #544]	@ (8000830 <LCD_init+0x244>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6093      	str	r3, [r2, #8]
	LCD.DATA5_PINx  = D5_PIN;
 8000612:	4a87      	ldr	r2, [pc, #540]	@ (8000830 <LCD_init+0x244>)
 8000614:	893b      	ldrh	r3, [r7, #8]
 8000616:	8193      	strh	r3, [r2, #12]

	LCD.DATA6_GPIOx = D6_GPIO;
 8000618:	4a85      	ldr	r2, [pc, #532]	@ (8000830 <LCD_init+0x244>)
 800061a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800061c:	6113      	str	r3, [r2, #16]
	LCD.DATA6_PINx  = D6_PIN;
 800061e:	4a84      	ldr	r2, [pc, #528]	@ (8000830 <LCD_init+0x244>)
 8000620:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000624:	8293      	strh	r3, [r2, #20]

	LCD.DATA7_GPIOx = D7_GPIO;
 8000626:	4a82      	ldr	r2, [pc, #520]	@ (8000830 <LCD_init+0x244>)
 8000628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800062a:	6193      	str	r3, [r2, #24]
	LCD.DATA7_PINx  = D7_PIN;
 800062c:	4a80      	ldr	r2, [pc, #512]	@ (8000830 <LCD_init+0x244>)
 800062e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000632:	8393      	strh	r3, [r2, #28]

	LCD.EN_GPIOx = EN_GPIO;
 8000634:	4a7e      	ldr	r2, [pc, #504]	@ (8000830 <LCD_init+0x244>)
 8000636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000638:	6213      	str	r3, [r2, #32]
	LCD.EN_PINx  = EN_PIN;
 800063a:	4a7d      	ldr	r2, [pc, #500]	@ (8000830 <LCD_init+0x244>)
 800063c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8000640:	8493      	strh	r3, [r2, #36]	@ 0x24

	LCD.RS_GPIOx = RS_GPIO;
 8000642:	4a7b      	ldr	r2, [pc, #492]	@ (8000830 <LCD_init+0x244>)
 8000644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000646:	6293      	str	r3, [r2, #40]	@ 0x28
	LCD.RS_PINx  = RS_PIN;
 8000648:	4a79      	ldr	r2, [pc, #484]	@ (8000830 <LCD_init+0x244>)
 800064a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800064e:	8593      	strh	r3, [r2, #44]	@ 0x2c

	DELAY_MS(50); // according to datasheet of LCD, we have to wait 40-50ms before the initialization
 8000650:	2300      	movs	r3, #0
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
 8000654:	e01f      	b.n	8000696 <LCD_init+0xaa>
 8000656:	4b77      	ldr	r3, [pc, #476]	@ (8000834 <LCD_init+0x248>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	4b76      	ldr	r3, [pc, #472]	@ (8000838 <LCD_init+0x24c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a76      	ldr	r2, [pc, #472]	@ (800083c <LCD_init+0x250>)
 8000662:	fba2 2303 	umull	r2, r3, r2, r3
 8000666:	0c9b      	lsrs	r3, r3, #18
 8000668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800066c:	fb03 f202 	mul.w	r2, r3, r2
 8000670:	4b71      	ldr	r3, [pc, #452]	@ (8000838 <LCD_init+0x24c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4971      	ldr	r1, [pc, #452]	@ (800083c <LCD_init+0x250>)
 8000676:	fba1 1303 	umull	r1, r3, r1, r3
 800067a:	0c9b      	lsrs	r3, r3, #18
 800067c:	085b      	lsrs	r3, r3, #1
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b6c      	ldr	r3, [pc, #432]	@ (8000834 <LCD_init+0x248>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f8      	bhi.n	8000682 <LCD_init+0x96>
 8000690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000692:	3301      	adds	r3, #1
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
 8000696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000698:	2b31      	cmp	r3, #49	@ 0x31
 800069a:	d9dc      	bls.n	8000656 <LCD_init+0x6a>
	GPIO_RESET_PIN(LCD.RS_GPIOx, LCD.RS_PINx); // clear RS and EN pin
 800069c:	4b64      	ldr	r3, [pc, #400]	@ (8000830 <LCD_init+0x244>)
 800069e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006a0:	4a63      	ldr	r2, [pc, #396]	@ (8000830 <LCD_init+0x244>)
 80006a2:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff70 	bl	800058c <GPIO_RESET_PIN>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 80006ac:	4b60      	ldr	r3, [pc, #384]	@ (8000830 <LCD_init+0x244>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a5f      	ldr	r2, [pc, #380]	@ (8000830 <LCD_init+0x244>)
 80006b2:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff68 	bl	800058c <GPIO_RESET_PIN>

	LCD_data(0x00); // configuration commands
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 f8bf 	bl	8000840 <LCD_data>
	DELAY_MS(150);
 80006c2:	2300      	movs	r3, #0
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80006c6:	e01f      	b.n	8000708 <LCD_init+0x11c>
 80006c8:	4b5a      	ldr	r3, [pc, #360]	@ (8000834 <LCD_init+0x248>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	61fb      	str	r3, [r7, #28]
 80006ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000838 <LCD_init+0x24c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a5a      	ldr	r2, [pc, #360]	@ (800083c <LCD_init+0x250>)
 80006d4:	fba2 2303 	umull	r2, r3, r2, r3
 80006d8:	0c9b      	lsrs	r3, r3, #18
 80006da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006de:	fb03 f202 	mul.w	r2, r3, r2
 80006e2:	4b55      	ldr	r3, [pc, #340]	@ (8000838 <LCD_init+0x24c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4955      	ldr	r1, [pc, #340]	@ (800083c <LCD_init+0x250>)
 80006e8:	fba1 1303 	umull	r1, r3, r1, r3
 80006ec:	0c9b      	lsrs	r3, r3, #18
 80006ee:	085b      	lsrs	r3, r3, #1
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	4b4f      	ldr	r3, [pc, #316]	@ (8000834 <LCD_init+0x248>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	69fa      	ldr	r2, [r7, #28]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	69ba      	ldr	r2, [r7, #24]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d8f8      	bhi.n	80006f4 <LCD_init+0x108>
 8000702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000704:	3301      	adds	r3, #1
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
 8000708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800070a:	2b95      	cmp	r3, #149	@ 0x95
 800070c:	d9dc      	bls.n	80006c8 <LCD_init+0xdc>
	LCD_cmd(0x03);
 800070e:	2003      	movs	r0, #3
 8000710:	f000 f8fa 	bl	8000908 <LCD_cmd>
	DELAY_MS(5);
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000718:	e01f      	b.n	800075a <LCD_init+0x16e>
 800071a:	4b46      	ldr	r3, [pc, #280]	@ (8000834 <LCD_init+0x248>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000720:	4b45      	ldr	r3, [pc, #276]	@ (8000838 <LCD_init+0x24c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a45      	ldr	r2, [pc, #276]	@ (800083c <LCD_init+0x250>)
 8000726:	fba2 2303 	umull	r2, r3, r2, r3
 800072a:	0c9b      	lsrs	r3, r3, #18
 800072c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000730:	fb03 f202 	mul.w	r2, r3, r2
 8000734:	4b40      	ldr	r3, [pc, #256]	@ (8000838 <LCD_init+0x24c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4940      	ldr	r1, [pc, #256]	@ (800083c <LCD_init+0x250>)
 800073a:	fba1 1303 	umull	r1, r3, r1, r3
 800073e:	0c9b      	lsrs	r3, r3, #18
 8000740:	085b      	lsrs	r3, r3, #1
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	623b      	str	r3, [r7, #32]
 8000746:	4b3b      	ldr	r3, [pc, #236]	@ (8000834 <LCD_init+0x248>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	6a3a      	ldr	r2, [r7, #32]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f8      	bhi.n	8000746 <LCD_init+0x15a>
 8000754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000756:	3301      	adds	r3, #1
 8000758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800075a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800075c:	2b04      	cmp	r3, #4
 800075e:	d9dc      	bls.n	800071a <LCD_init+0x12e>
	LCD_cmd(0x03);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f8d1 	bl	8000908 <LCD_cmd>
	DELAY_MS(5);
 8000766:	2300      	movs	r3, #0
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800076a:	e01f      	b.n	80007ac <LCD_init+0x1c0>
 800076c:	4b31      	ldr	r3, [pc, #196]	@ (8000834 <LCD_init+0x248>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000772:	4b31      	ldr	r3, [pc, #196]	@ (8000838 <LCD_init+0x24c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a31      	ldr	r2, [pc, #196]	@ (800083c <LCD_init+0x250>)
 8000778:	fba2 2303 	umull	r2, r3, r2, r3
 800077c:	0c9b      	lsrs	r3, r3, #18
 800077e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000782:	fb03 f202 	mul.w	r2, r3, r2
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <LCD_init+0x24c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	492c      	ldr	r1, [pc, #176]	@ (800083c <LCD_init+0x250>)
 800078c:	fba1 1303 	umull	r1, r3, r1, r3
 8000790:	0c9b      	lsrs	r3, r3, #18
 8000792:	085b      	lsrs	r3, r3, #1
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000798:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <LCD_init+0x248>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d8f8      	bhi.n	8000798 <LCD_init+0x1ac>
 80007a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007a8:	3301      	adds	r3, #1
 80007aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80007ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d9dc      	bls.n	800076c <LCD_init+0x180>
	LCD_cmd(0x03);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f000 f8a8 	bl	8000908 <LCD_cmd>
	DELAY_US(150);
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <LCD_init+0x248>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <LCD_init+0x24c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1e      	ldr	r2, [pc, #120]	@ (800083c <LCD_init+0x250>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	0c9b      	lsrs	r3, r3, #18
 80007ca:	2296      	movs	r2, #150	@ 0x96
 80007cc:	fb03 f202 	mul.w	r2, r3, r2
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <LCD_init+0x24c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4919      	ldr	r1, [pc, #100]	@ (800083c <LCD_init+0x250>)
 80007d6:	fba1 1303 	umull	r1, r3, r1, r3
 80007da:	0c9b      	lsrs	r3, r3, #18
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <LCD_init+0x248>)
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d8f8      	bhi.n	80007e2 <LCD_init+0x1f6>

	LCD_cmd(0x02); 	// 4-bit mode
 80007f0:	2002      	movs	r0, #2
 80007f2:	f000 f889 	bl	8000908 <LCD_cmd>
	LCD_cmd(0x02);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 f886 	bl	8000908 <LCD_cmd>
	LCD_cmd(0x08);
 80007fc:	2008      	movs	r0, #8
 80007fe:	f000 f883 	bl	8000908 <LCD_cmd>

	LCD_cmd(0x00); // display on
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f880 	bl	8000908 <LCD_cmd>
	LCD_cmd(0x0C);
 8000808:	200c      	movs	r0, #12
 800080a:	f000 f87d 	bl	8000908 <LCD_cmd>

	LCD_cmd(0x00); 	// entry mode
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f87a 	bl	8000908 <LCD_cmd>
	LCD_cmd(0x06);
 8000814:	2006      	movs	r0, #6
 8000816:	f000 f877 	bl	8000908 <LCD_cmd>

	LCD_cmd(0x00); 	// clear
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f874 	bl	8000908 <LCD_cmd>
	LCD_cmd(0x01);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 f871 	bl	8000908 <LCD_cmd>
}
 8000826:	bf00      	nop
 8000828:	3748      	adds	r7, #72	@ 0x48
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028
 8000834:	e000e010 	.word	0xe000e010
 8000838:	20000000 	.word	0x20000000
 800083c:	431bde83 	.word	0x431bde83

08000840 <LCD_data>:
/**
 * @brief Sends 4-bit data to the LCD data lines (D4–D7)
 *
 * @param data 4-bit value to send (lower nibble used)
 */
void LCD_data(unsigned char data){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]

	if(data & 1){
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d008      	beq.n	8000866 <LCD_data+0x26>
		GPIO_SET_PIN(LCD.DATA4_GPIOx,   LCD.DATA4_PINx);
 8000854:	4b2b      	ldr	r3, [pc, #172]	@ (8000904 <LCD_data+0xc4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2a      	ldr	r2, [pc, #168]	@ (8000904 <LCD_data+0xc4>)
 800085a:	8892      	ldrh	r2, [r2, #4]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe66 	bl	8000530 <GPIO_SET_PIN>
 8000864:	e007      	b.n	8000876 <LCD_data+0x36>
	}
	else{
		GPIO_RESET_PIN(LCD.DATA4_GPIOx, LCD.DATA4_PINx);
 8000866:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <LCD_data+0xc4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a26      	ldr	r2, [pc, #152]	@ (8000904 <LCD_data+0xc4>)
 800086c:	8892      	ldrh	r2, [r2, #4]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe8b 	bl	800058c <GPIO_RESET_PIN>
	}

	if(data & 2){
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <LCD_data+0x52>
		GPIO_SET_PIN(LCD.DATA5_GPIOx,   LCD.DATA5_PINx);
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <LCD_data+0xc4>)
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <LCD_data+0xc4>)
 8000886:	8992      	ldrh	r2, [r2, #12]
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe50 	bl	8000530 <GPIO_SET_PIN>
 8000890:	e007      	b.n	80008a2 <LCD_data+0x62>
	}
	else{
		GPIO_RESET_PIN(LCD.DATA5_GPIOx, LCD.DATA5_PINx);
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <LCD_data+0xc4>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <LCD_data+0xc4>)
 8000898:	8992      	ldrh	r2, [r2, #12]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe75 	bl	800058c <GPIO_RESET_PIN>
	}

	if(data & 4){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d008      	beq.n	80008be <LCD_data+0x7e>
		GPIO_SET_PIN(LCD.DATA6_GPIOx,   LCD.DATA6_PINx);
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <LCD_data+0xc4>)
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	4a14      	ldr	r2, [pc, #80]	@ (8000904 <LCD_data+0xc4>)
 80008b2:	8a92      	ldrh	r2, [r2, #20]
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe3a 	bl	8000530 <GPIO_SET_PIN>
 80008bc:	e007      	b.n	80008ce <LCD_data+0x8e>
	}
	else{
		GPIO_RESET_PIN(LCD.DATA6_GPIOx, LCD.DATA6_PINx);
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <LCD_data+0xc4>)
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <LCD_data+0xc4>)
 80008c4:	8a92      	ldrh	r2, [r2, #20]
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe5f 	bl	800058c <GPIO_RESET_PIN>
	}

	if(data & 8){
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d008      	beq.n	80008ea <LCD_data+0xaa>
		GPIO_SET_PIN(LCD.DATA7_GPIOx,   LCD.DATA7_PINx);
 80008d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <LCD_data+0xc4>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a09      	ldr	r2, [pc, #36]	@ (8000904 <LCD_data+0xc4>)
 80008de:	8b92      	ldrh	r2, [r2, #28]
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe24 	bl	8000530 <GPIO_SET_PIN>
	}
	else{
		GPIO_RESET_PIN(LCD.DATA7_GPIOx, LCD.DATA7_PINx);
	}
}
 80008e8:	e007      	b.n	80008fa <LCD_data+0xba>
		GPIO_RESET_PIN(LCD.DATA7_GPIOx, LCD.DATA7_PINx);
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <LCD_data+0xc4>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <LCD_data+0xc4>)
 80008f0:	8b92      	ldrh	r2, [r2, #28]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe49 	bl	800058c <GPIO_RESET_PIN>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028

08000908 <LCD_cmd>:
 * Typically used for instructions like clearing the display,
 * setting cursor position, etc
 *
 * @param cmd 4-bit command to send
 */
void LCD_cmd(unsigned char cmd){
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]

	GPIO_RESET_PIN(LCD.RS_GPIOx, LCD.RS_PINx); // sending a gpio pulse for trigging the data commands
 8000912:	4b3e      	ldr	r3, [pc, #248]	@ (8000a0c <LCD_cmd+0x104>)
 8000914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000916:	4a3d      	ldr	r2, [pc, #244]	@ (8000a0c <LCD_cmd+0x104>)
 8000918:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe35 	bl	800058c <GPIO_RESET_PIN>
	LCD_data(cmd);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff8b 	bl	8000840 <LCD_data>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <LCD_cmd+0x104>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4a37      	ldr	r2, [pc, #220]	@ (8000a0c <LCD_cmd+0x104>)
 8000930:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fe29 	bl	800058c <GPIO_RESET_PIN>
	DELAY_US(5);
 800093a:	4b35      	ldr	r3, [pc, #212]	@ (8000a10 <LCD_cmd+0x108>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <LCD_cmd+0x10c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a34      	ldr	r2, [pc, #208]	@ (8000a18 <LCD_cmd+0x110>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9a      	lsrs	r2, r3, #18
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	441a      	add	r2, r3
 8000952:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <LCD_cmd+0x10c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4930      	ldr	r1, [pc, #192]	@ (8000a18 <LCD_cmd+0x110>)
 8000958:	fba1 1303 	umull	r1, r3, r1, r3
 800095c:	0c9b      	lsrs	r3, r3, #18
 800095e:	085b      	lsrs	r3, r3, #1
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <LCD_cmd+0x108>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	69fa      	ldr	r2, [r7, #28]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	429a      	cmp	r2, r3
 8000970:	d8f8      	bhi.n	8000964 <LCD_cmd+0x5c>
	GPIO_SET_PIN(LCD.EN_GPIOx,   LCD.EN_PINx);
 8000972:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <LCD_cmd+0x104>)
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	4a25      	ldr	r2, [pc, #148]	@ (8000a0c <LCD_cmd+0x104>)
 8000978:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fdd7 	bl	8000530 <GPIO_SET_PIN>
	DELAY_US(5);
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <LCD_cmd+0x108>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <LCD_cmd+0x10c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a22      	ldr	r2, [pc, #136]	@ (8000a18 <LCD_cmd+0x110>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	0c9a      	lsrs	r2, r3, #18
 8000994:	4613      	mov	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	441a      	add	r2, r3
 800099a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <LCD_cmd+0x10c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	491e      	ldr	r1, [pc, #120]	@ (8000a18 <LCD_cmd+0x110>)
 80009a0:	fba1 1303 	umull	r1, r3, r1, r3
 80009a4:	0c9b      	lsrs	r3, r3, #18
 80009a6:	085b      	lsrs	r3, r3, #1
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <LCD_cmd+0x108>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d8f8      	bhi.n	80009ac <LCD_cmd+0xa4>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <LCD_cmd+0x104>)
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <LCD_cmd+0x104>)
 80009c0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fde1 	bl	800058c <GPIO_RESET_PIN>
	DELAY_US(100);
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <LCD_cmd+0x108>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <LCD_cmd+0x10c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <LCD_cmd+0x110>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	0c9b      	lsrs	r3, r3, #18
 80009dc:	2264      	movs	r2, #100	@ 0x64
 80009de:	fb03 f202 	mul.w	r2, r3, r2
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <LCD_cmd+0x10c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <LCD_cmd+0x110>)
 80009e8:	fba1 1303 	umull	r1, r3, r1, r3
 80009ec:	0c9b      	lsrs	r3, r3, #18
 80009ee:	085b      	lsrs	r3, r3, #1
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <LCD_cmd+0x108>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d8f8      	bhi.n	80009f4 <LCD_cmd+0xec>
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000028 	.word	0x20000028
 8000a10:	e000e010 	.word	0xe000e010
 8000a14:	20000000 	.word	0x20000000
 8000a18:	431bde83 	.word	0x431bde83

08000a1c <LCD_clear>:

/**
 * @brief Clears the LCD screen and resets cursor position
 * @param void
 */
void LCD_clear(void){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0

	LCD_cmd(0);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ff70 	bl	8000908 <LCD_cmd>
	LCD_cmd(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff ff6d 	bl	8000908 <LCD_cmd>
	DELAY_MS(2);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e01f      	b.n	8000a74 <LCD_clear+0x58>
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <LCD_clear+0x68>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <LCD_clear+0x6c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <LCD_clear+0x70>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	0c9b      	lsrs	r3, r3, #18
 8000a46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a4a:	fb03 f202 	mul.w	r2, r3, r2
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <LCD_clear+0x6c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	490e      	ldr	r1, [pc, #56]	@ (8000a8c <LCD_clear+0x70>)
 8000a54:	fba1 1303 	umull	r1, r3, r1, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	085b      	lsrs	r3, r3, #1
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <LCD_clear+0x68>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d8f8      	bhi.n	8000a60 <LCD_clear+0x44>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d9dc      	bls.n	8000a34 <LCD_clear+0x18>
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	e000e010 	.word	0xe000e010
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	431bde83 	.word	0x431bde83

08000a90 <LCD_setCursor>:
 * @brief Sets the LCD cursor to a specific row and column
 *
 * @param row Row number (1 or 2)
 * @param column Column number (starting from 1)
 */
void LCD_setCursor(unsigned char row, unsigned char column){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	460a      	mov	r2, r1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]

	unsigned char temp, low4, high4;

	if(row == 1){
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d103      	bne.n	8000aae <LCD_setCursor+0x1e>
		temp = 0x80 + column - 1; // according to datasheet of LCD, we determine the row (1 or 2)
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	337f      	adds	r3, #127	@ 0x7f
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e005      	b.n	8000aba <LCD_setCursor+0x2a>
	}
	else if(row == 2){
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d102      	bne.n	8000aba <LCD_setCursor+0x2a>
		temp = 0xC0 + column - 1;
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	3b41      	subs	r3, #65	@ 0x41
 8000ab8:	73fb      	strb	r3, [r7, #15]
	}

	high4 = temp >> 4; // conversion to 4-bit type
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	091b      	lsrs	r3, r3, #4
 8000abe:	73bb      	strb	r3, [r7, #14]
	low4 = temp & 0x0F;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	737b      	strb	r3, [r7, #13]
	LCD_cmd(high4);
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff1c 	bl	8000908 <LCD_cmd>
	LCD_cmd(low4);
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff18 	bl	8000908 <LCD_cmd>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <LCD_writeChar>:
 *
 * Sends the character data to the LCD for display at the current cursor position
 *
 * @param data Character to display
 */
void LCD_writeChar(char data){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b090      	sub	sp, #64	@ 0x40
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]

	char low4, high4;
	low4  = data & 0x0F; // read data with bitwise masking
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 030f 	and.w	r3, r3, #15
 8000af0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	high4 = data & 0xF0;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f023 030f 	bic.w	r3, r3, #15
 8000afa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	GPIO_SET_PIN(LCD.RS_GPIOx, LCD.RS_PINx);
 8000afe:	4b78      	ldr	r3, [pc, #480]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b02:	4a77      	ldr	r2, [pc, #476]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000b04:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fd11 	bl	8000530 <GPIO_SET_PIN>

	LCD_data(high4 >> 4);
 8000b0e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fe92 	bl	8000840 <LCD_data>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000b1c:	4b70      	ldr	r3, [pc, #448]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4a6f      	ldr	r2, [pc, #444]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000b22:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd30 	bl	800058c <GPIO_RESET_PIN>
	DELAY_US(5);
 8000b2c:	4b6d      	ldr	r3, [pc, #436]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b32:	4b6d      	ldr	r3, [pc, #436]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a6d      	ldr	r2, [pc, #436]	@ (8000cec <LCD_writeChar+0x20c>)
 8000b38:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3c:	0c9a      	lsrs	r2, r3, #18
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	441a      	add	r2, r3
 8000b44:	4b68      	ldr	r3, [pc, #416]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4968      	ldr	r1, [pc, #416]	@ (8000cec <LCD_writeChar+0x20c>)
 8000b4a:	fba1 1303 	umull	r1, r3, r1, r3
 8000b4e:	0c9b      	lsrs	r3, r3, #18
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b56:	4b63      	ldr	r3, [pc, #396]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8f8      	bhi.n	8000b56 <LCD_writeChar+0x76>
	GPIO_SET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000b64:	4b5e      	ldr	r3, [pc, #376]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	4a5d      	ldr	r2, [pc, #372]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000b6a:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fcde 	bl	8000530 <GPIO_SET_PIN>
	DELAY_US(5);
 8000b74:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8000cec <LCD_writeChar+0x20c>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	0c9a      	lsrs	r2, r3, #18
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	441a      	add	r2, r3
 8000b8c:	4b56      	ldr	r3, [pc, #344]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4956      	ldr	r1, [pc, #344]	@ (8000cec <LCD_writeChar+0x20c>)
 8000b92:	fba1 1303 	umull	r1, r3, r1, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	085b      	lsrs	r3, r3, #1
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b9e:	4b51      	ldr	r3, [pc, #324]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f8      	bhi.n	8000b9e <LCD_writeChar+0xbe>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000bac:	4b4c      	ldr	r3, [pc, #304]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000bb2:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fce8 	bl	800058c <GPIO_RESET_PIN>
	DELAY_US(100);
 8000bbc:	4b49      	ldr	r3, [pc, #292]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bc2:	4b49      	ldr	r3, [pc, #292]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a49      	ldr	r2, [pc, #292]	@ (8000cec <LCD_writeChar+0x20c>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	0c9b      	lsrs	r3, r3, #18
 8000bce:	2264      	movs	r2, #100	@ 0x64
 8000bd0:	fb03 f202 	mul.w	r2, r3, r2
 8000bd4:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4944      	ldr	r1, [pc, #272]	@ (8000cec <LCD_writeChar+0x20c>)
 8000bda:	fba1 1303 	umull	r1, r3, r1, r3
 8000bde:	0c9b      	lsrs	r3, r3, #18
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f8      	bhi.n	8000be6 <LCD_writeChar+0x106>

	LCD_data(low4);
 8000bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fe21 	bl	8000840 <LCD_data>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000bfe:	4b38      	ldr	r3, [pc, #224]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	4a37      	ldr	r2, [pc, #220]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000c04:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fcbf 	bl	800058c <GPIO_RESET_PIN>
	DELAY_US(5);
 8000c0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	4b34      	ldr	r3, [pc, #208]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a34      	ldr	r2, [pc, #208]	@ (8000cec <LCD_writeChar+0x20c>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9a      	lsrs	r2, r3, #18
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	441a      	add	r2, r3
 8000c26:	4b30      	ldr	r3, [pc, #192]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4930      	ldr	r1, [pc, #192]	@ (8000cec <LCD_writeChar+0x20c>)
 8000c2c:	fba1 1303 	umull	r1, r3, r1, r3
 8000c30:	0c9b      	lsrs	r3, r3, #18
 8000c32:	085b      	lsrs	r3, r3, #1
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	6a3a      	ldr	r2, [r7, #32]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	69fa      	ldr	r2, [r7, #28]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d8f8      	bhi.n	8000c38 <LCD_writeChar+0x158>
	GPIO_SET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000c4c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fc6d 	bl	8000530 <GPIO_SET_PIN>
	DELAY_US(5);
 8000c56:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a22      	ldr	r2, [pc, #136]	@ (8000cec <LCD_writeChar+0x20c>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	0c9a      	lsrs	r2, r3, #18
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	441a      	add	r2, r3
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	491e      	ldr	r1, [pc, #120]	@ (8000cec <LCD_writeChar+0x20c>)
 8000c74:	fba1 1303 	umull	r1, r3, r1, r3
 8000c78:	0c9b      	lsrs	r3, r3, #18
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d8f8      	bhi.n	8000c80 <LCD_writeChar+0x1a0>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <LCD_writeChar+0x200>)
 8000c94:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc77 	bl	800058c <GPIO_RESET_PIN>
	DELAY_US(100);
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <LCD_writeChar+0x20c>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9b      	lsrs	r3, r3, #18
 8000cb0:	2264      	movs	r2, #100	@ 0x64
 8000cb2:	fb03 f202 	mul.w	r2, r3, r2
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <LCD_writeChar+0x208>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	490c      	ldr	r1, [pc, #48]	@ (8000cec <LCD_writeChar+0x20c>)
 8000cbc:	fba1 1303 	umull	r1, r3, r1, r3
 8000cc0:	0c9b      	lsrs	r3, r3, #18
 8000cc2:	085b      	lsrs	r3, r3, #1
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <LCD_writeChar+0x204>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d8f8      	bhi.n	8000cc8 <LCD_writeChar+0x1e8>
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	3740      	adds	r7, #64	@ 0x40
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000028 	.word	0x20000028
 8000ce4:	e000e010 	.word	0xe000e010
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	431bde83 	.word	0x431bde83

08000cf0 <LCD_writeString>:
 *
 * Displays the string starting at the current cursor position
 *
 * @param str Pointer to the null-terminated string
 */
void LCD_writeString(const char *str){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

	for(int i=0; str[i]!='\0'; i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e009      	b.n	8000d12 <LCD_writeString+0x22>
		LCD_writeChar(str[i]);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff feea 	bl	8000ae0 <LCD_writeChar>
	for(int i=0; str[i]!='\0'; i++){
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1ef      	bne.n	8000cfe <LCD_writeString+0xe>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	@ 0x30
 8000d2c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f000 f9cf 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f861 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d36:	f000 f8d1 	bl	8000edc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_init(GPIOB, GPIO_PIN_15,
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	9307      	str	r3, [sp, #28]
 8000d40:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <main+0xb8>)
 8000d42:	9306      	str	r3, [sp, #24]
 8000d44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d48:	9305      	str	r3, [sp, #20]
 8000d4a:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <main+0xb8>)
 8000d4c:	9304      	str	r3, [sp, #16]
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	9303      	str	r3, [sp, #12]
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <main+0xb8>)
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2304      	movs	r3, #4
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <main+0xb8>)
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2302      	movs	r3, #2
 8000d62:	4a1f      	ldr	r2, [pc, #124]	@ (8000de0 <main+0xb8>)
 8000d64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d68:	481d      	ldr	r0, [pc, #116]	@ (8000de0 <main+0xb8>)
 8000d6a:	f7ff fc3f 	bl	80005ec <LCD_init>
		         GPIOB, GPIO_PIN_1,
				 GPIOB, GPIO_PIN_2,
				 GPIOB, GPIO_PIN_12,
				 GPIOB, GPIO_PIN_14,
				 GPIOB, GPIO_PIN_13);
  LCD_clear();
 8000d6e:	f7ff fe55 	bl	8000a1c <LCD_clear>
  LCD_setCursor(1, 1);
 8000d72:	2101      	movs	r1, #1
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fe8b 	bl	8000a90 <LCD_setCursor>
  LCD_writeString("LCD Driver v1.0");
 8000d7a:	481a      	ldr	r0, [pc, #104]	@ (8000de4 <main+0xbc>)
 8000d7c:	f7ff ffb8 	bl	8000cf0 <LCD_writeString>
  DELAY_MS(1);
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e01f      	b.n	8000dc6 <main+0x9e>
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <main+0xc0>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <main+0xc4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a17      	ldr	r2, [pc, #92]	@ (8000df0 <main+0xc8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9b      	lsrs	r3, r3, #18
 8000d98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d9c:	fb03 f202 	mul.w	r2, r3, r2
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <main+0xc4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4912      	ldr	r1, [pc, #72]	@ (8000df0 <main+0xc8>)
 8000da6:	fba1 1303 	umull	r1, r3, r1, r3
 8000daa:	0c9b      	lsrs	r3, r3, #18
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <main+0xc0>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f8      	bhi.n	8000db2 <main+0x8a>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0dc      	beq.n	8000d86 <main+0x5e>
  LCD_setCursor(2, 1);
 8000dcc:	2101      	movs	r1, #1
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f7ff fe5e 	bl	8000a90 <LCD_setCursor>
  LCD_writeString("by mnane34");
 8000dd4:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <main+0xcc>)
 8000dd6:	f7ff ff8b 	bl	8000cf0 <LCD_writeString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dda:	bf00      	nop
 8000ddc:	e7fd      	b.n	8000dda <main+0xb2>
 8000dde:	bf00      	nop
 8000de0:	40020400 	.word	0x40020400
 8000de4:	08002248 	.word	0x08002248
 8000de8:	e000e010 	.word	0xe000e010
 8000dec:	20000000 	.word	0x20000000
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	08002258 	.word	0x08002258

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	@ 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2234      	movs	r2, #52	@ 0x34
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 f9e6 	bl	80021d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <SystemClock_Config+0xdc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	4a2b      	ldr	r2, [pc, #172]	@ (8000ed4 <SystemClock_Config+0xdc>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ed4 <SystemClock_Config+0xdc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <SystemClock_Config+0xe0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a25      	ldr	r2, [pc, #148]	@ (8000ed8 <SystemClock_Config+0xe0>)
 8000e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <SystemClock_Config+0xe0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e60:	2302      	movs	r3, #2
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e6c:	23b4      	movs	r3, #180	@ 0xb4
 8000e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 ff0b 	bl	8001c9c <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e8c:	f000 f886 	bl	8000f9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e90:	f000 fc24 	bl	80016dc <HAL_PWREx_EnableOverDrive>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e9a:	f000 f87f 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eaa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2105      	movs	r1, #5
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fc5d 	bl	800177c <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ec8:	f000 f868 	bl	8000f9c <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3750      	adds	r7, #80	@ 0x50
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_GPIO_Init+0xb8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f62:	2200      	movs	r2, #0
 8000f64:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000f68:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <MX_GPIO_Init+0xbc>)
 8000f6a:	f000 fb9d 	bl	80016a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f6e:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000f72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_GPIO_Init+0xbc>)
 8000f88:	f000 f9fa 	bl	8001380 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	@ 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <Error_Handler+0x8>

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <NMI_Handler+0x4>

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <MemManage_Handler+0x4>

08001010 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <UsageFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104e:	f000 f891 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f001 f89d 	bl	80021e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fe3b 	bl	8000d28 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c0:	08002284 	.word	0x08002284
  ldr r2, =_sbss
 80010c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010c8:	2000005c 	.word	0x2000005c

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	@ (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f90d 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff ff50 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f917 	bl	8001366 <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f8ed 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000008 	.word	0x20000008
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20000058 	.word	0x20000058

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000058 	.word	0x20000058

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff47 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff5c 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff8e 	bl	800126c <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffb0 	bl	80012d4 <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	e165      	b.n	8001668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 8154 	bne.w	8001662 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d005      	beq.n	80013d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d130      	bne.n	8001434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 0201 	and.w	r2, r3, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b03      	cmp	r3, #3
 800143e:	d017      	beq.n	8001470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d123      	bne.n	80014c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	69b9      	ldr	r1, [r7, #24]
 80014c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80ae 	beq.w	8001662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_GPIO_Init+0x300>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	4a5c      	ldr	r2, [pc, #368]	@ (8001680 <HAL_GPIO_Init+0x300>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6453      	str	r3, [r2, #68]	@ 0x44
 8001516:	4b5a      	ldr	r3, [pc, #360]	@ (8001680 <HAL_GPIO_Init+0x300>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001522:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <HAL_GPIO_Init+0x304>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	@ (8001688 <HAL_GPIO_Init+0x308>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	@ (800168c <HAL_GPIO_Init+0x30c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	@ (8001690 <HAL_GPIO_Init+0x310>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	@ (8001694 <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	@ (8001698 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x20a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4a      	ldr	r2, [pc, #296]	@ (800169c <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x206>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a49      	ldr	r2, [pc, #292]	@ (80016a0 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x202>
 800157e:	2306      	movs	r3, #6
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001582:	2307      	movs	r3, #7
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x21c>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x21c>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x21c>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ac:	4935      	ldr	r1, [pc, #212]	@ (8001684 <HAL_GPIO_Init+0x304>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ba:	4b3a      	ldr	r3, [pc, #232]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015de:	4a31      	ldr	r2, [pc, #196]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e4:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001608:	4a26      	ldr	r2, [pc, #152]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800165c:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f ae96 	bls.w	800139c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40013800 	.word	0x40013800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40021400 	.word	0x40021400
 80016a0:	40021800 	.word	0x40021800
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c4:	e003      	b.n	80016ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	041a      	lsls	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_PWREx_EnableOverDrive+0x90>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <HAL_PWREx_EnableOverDrive+0x90>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <HAL_PWREx_EnableOverDrive+0x90>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001702:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_PWREx_EnableOverDrive+0x94>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001708:	f7ff fd48 	bl	800119c <HAL_GetTick>
 800170c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800170e:	e009      	b.n	8001724 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001710:	f7ff fd44 	bl	800119c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800171e:	d901      	bls.n	8001724 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e01f      	b.n	8001764 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_PWREx_EnableOverDrive+0x98>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001730:	d1ee      	bne.n	8001710 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001738:	f7ff fd30 	bl	800119c <HAL_GetTick>
 800173c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800173e:	e009      	b.n	8001754 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001740:	f7ff fd2c 	bl	800119c <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800174e:	d901      	bls.n	8001754 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e007      	b.n	8001764 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <HAL_PWREx_EnableOverDrive+0x98>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001760:	d1ee      	bne.n	8001740 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	420e0040 	.word	0x420e0040
 8001774:	40007000 	.word	0x40007000
 8001778:	420e0044 	.word	0x420e0044

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cc      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b68      	ldr	r3, [pc, #416]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d90c      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b65      	ldr	r3, [pc, #404]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b63      	ldr	r3, [pc, #396]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b8      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4b59      	ldr	r3, [pc, #356]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a58      	ldr	r2, [pc, #352]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a52      	ldr	r2, [pc, #328]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b50      	ldr	r3, [pc, #320]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	494d      	ldr	r1, [pc, #308]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d044      	beq.n	800189c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d119      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e07f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d003      	beq.n	800183a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	2b03      	cmp	r3, #3
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e067      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185a:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0203 	bic.w	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4934      	ldr	r1, [pc, #208]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff fc96 	bl	800119c <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	e00a      	b.n	800188a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7ff fc92 	bl	800119c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e04f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 020c 	and.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d1eb      	bne.n	8001874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d20c      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e032      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4916      	ldr	r1, [pc, #88]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	490e      	ldr	r1, [pc, #56]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001902:	f000 f821 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001906:	4602      	mov	r2, r0
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	490a      	ldr	r1, [pc, #40]	@ (800193c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fbf6 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	08002264 	.word	0x08002264
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800194c:	b0a6      	sub	sp, #152	@ 0x98
 800194e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196e:	4bc8      	ldr	r3, [pc, #800]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b0c      	cmp	r3, #12
 8001978:	f200 817e 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x330>
 800197c:	a201      	add	r2, pc, #4	@ (adr r2, 8001984 <HAL_RCC_GetSysClockFreq+0x3c>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	080019b9 	.word	0x080019b9
 8001988:	08001c79 	.word	0x08001c79
 800198c:	08001c79 	.word	0x08001c79
 8001990:	08001c79 	.word	0x08001c79
 8001994:	080019c1 	.word	0x080019c1
 8001998:	08001c79 	.word	0x08001c79
 800199c:	08001c79 	.word	0x08001c79
 80019a0:	08001c79 	.word	0x08001c79
 80019a4:	080019c9 	.word	0x080019c9
 80019a8:	08001c79 	.word	0x08001c79
 80019ac:	08001c79 	.word	0x08001c79
 80019b0:	08001c79 	.word	0x08001c79
 80019b4:	08001b33 	.word	0x08001b33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4bb6      	ldr	r3, [pc, #728]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019be:	e15f      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c0:	4bb5      	ldr	r3, [pc, #724]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 80019c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019c6:	e15b      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d4:	4bae      	ldr	r3, [pc, #696]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d031      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	4bab      	ldr	r3, [pc, #684]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	2200      	movs	r2, #0
 80019e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80019f4:	2300      	movs	r3, #0
 80019f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80019f8:	4ba7      	ldr	r3, [pc, #668]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 80019fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019fe:	462a      	mov	r2, r5
 8001a00:	fb03 f202 	mul.w	r2, r3, r2
 8001a04:	2300      	movs	r3, #0
 8001a06:	4621      	mov	r1, r4
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4aa2      	ldr	r2, [pc, #648]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a10:	4621      	mov	r1, r4
 8001a12:	fba1 1202 	umull	r1, r2, r1, r2
 8001a16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a18:	460a      	mov	r2, r1
 8001a1a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a1e:	4413      	add	r3, r2
 8001a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a26:	2200      	movs	r2, #0
 8001a28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a34:	f7fe fbe6 	bl	8000204 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a42:	e064      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a44:	4b92      	ldr	r3, [pc, #584]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a4e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a60:	4622      	mov	r2, r4
 8001a62:	462b      	mov	r3, r5
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	0159      	lsls	r1, r3, #5
 8001a6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a72:	0150      	lsls	r0, r2, #5
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4621      	mov	r1, r4
 8001a7a:	1a51      	subs	r1, r2, r1
 8001a7c:	6139      	str	r1, [r7, #16]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	eb63 0301 	sbc.w	r3, r3, r1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a92:	4659      	mov	r1, fp
 8001a94:	018b      	lsls	r3, r1, #6
 8001a96:	4651      	mov	r1, sl
 8001a98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	018a      	lsls	r2, r1, #6
 8001aa0:	4651      	mov	r1, sl
 8001aa2:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa6:	4659      	mov	r1, fp
 8001aa8:	eb63 0901 	sbc.w	r9, r3, r1
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001abc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac0:	4690      	mov	r8, r2
 8001ac2:	4699      	mov	r9, r3
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	eb18 0303 	adds.w	r3, r8, r3
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	462b      	mov	r3, r5
 8001ace:	eb49 0303 	adc.w	r3, r9, r3
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	028b      	lsls	r3, r1, #10
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aea:	4621      	mov	r1, r4
 8001aec:	028a      	lsls	r2, r1, #10
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001af6:	2200      	movs	r2, #0
 8001af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8001afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b00:	f7fe fb80 	bl	8000204 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b0e:	4b60      	ldr	r3, [pc, #384]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001b20:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b30:	e0a6      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b32:	4b57      	ldr	r3, [pc, #348]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3e:	4b54      	ldr	r3, [pc, #336]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d02a      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b51      	ldr	r3, [pc, #324]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	2200      	movs	r2, #0
 8001b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b60:	fb03 f201 	mul.w	r2, r3, r1
 8001b64:	2300      	movs	r3, #0
 8001b66:	fb00 f303 	mul.w	r3, r0, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b6e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b74:	460a      	mov	r2, r1
 8001b76:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b78:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b7a:	4413      	add	r3, r2
 8001b7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b82:	2200      	movs	r2, #0
 8001b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b86:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b90:	f7fe fb38 	bl	8000204 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b9e:	e05b      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bbc:	4642      	mov	r2, r8
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0159      	lsls	r1, r3, #5
 8001bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bce:	0150      	lsls	r0, r2, #5
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	18e3      	adds	r3, r4, r3
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	464b      	mov	r3, r9
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	028b      	lsls	r3, r1, #10
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c34:	4621      	mov	r1, r4
 8001c36:	028a      	lsls	r2, r1, #10
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c40:	2200      	movs	r2, #0
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	61fa      	str	r2, [r7, #28]
 8001c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4a:	f7fe fadb 	bl	8000204 <__aeabi_uldivmod>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4613      	mov	r3, r2
 8001c54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0f1b      	lsrs	r3, r3, #28
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c76:	e003      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3798      	adds	r7, #152	@ 0x98
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	017d7840 	.word	0x017d7840

08001c9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e28d      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8083 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cbc:	4b94      	ldr	r3, [pc, #592]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d019      	beq.n	8001cfc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cc8:	4b91      	ldr	r3, [pc, #580]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
        || \
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce0:	d00c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d112      	bne.n	8001d14 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cee:	4b88      	ldr	r3, [pc, #544]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b84      	ldr	r3, [pc, #528]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x124>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e25a      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x90>
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7b      	ldr	r2, [pc, #492]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xcc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0xb4>
 8001d36:	4b76      	ldr	r3, [pc, #472]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a75      	ldr	r2, [pc, #468]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a72      	ldr	r2, [pc, #456]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xcc>
 8001d50:	4b6f      	ldr	r3, [pc, #444]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a6e      	ldr	r2, [pc, #440]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6b      	ldr	r2, [pc, #428]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff fa14 	bl	800119c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fa10 	bl	800119c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	@ 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e21f      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	4b61      	ldr	r3, [pc, #388]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xdc>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa00 	bl	800119c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f9fc 	bl	800119c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e20b      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	4b57      	ldr	r3, [pc, #348]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x104>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06f      	beq.n	8001eae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dce:	4b50      	ldr	r3, [pc, #320]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d017      	beq.n	8001e0a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dda:	4b4d      	ldr	r3, [pc, #308]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
        || \
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d105      	bne.n	8001df2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001de6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b47      	ldr	r3, [pc, #284]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b44      	ldr	r3, [pc, #272]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x186>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e1d3      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b3b      	ldr	r3, [pc, #236]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4937      	ldr	r1, [pc, #220]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e03a      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <HAL_RCC_OscConfig+0x278>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff f9a9 	bl	800119c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f9a5 	bl	800119c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e1b4      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b28      	ldr	r3, [pc, #160]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4925      	ldr	r1, [pc, #148]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <HAL_RCC_OscConfig+0x278>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff f988 	bl	800119c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff f984 	bl	800119c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e193      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d036      	beq.n	8001f28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f968 	bl	800119c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f964 	bl	800119c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e173      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x234>
 8001eee:	e01b      	b.n	8001f28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f951 	bl	800119c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	e00e      	b.n	8001f1c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff f94d 	bl	800119c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d907      	bls.n	8001f1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e15c      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	42470000 	.word	0x42470000
 8001f18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ea      	bne.n	8001efe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8097 	beq.w	8002064 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b83      	ldr	r3, [pc, #524]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b7c      	ldr	r3, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b79      	ldr	r3, [pc, #484]	@ (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b76      	ldr	r3, [pc, #472]	@ (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a75      	ldr	r2, [pc, #468]	@ (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f90d 	bl	800119c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7ff f909 	bl	800119c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e118      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b6c      	ldr	r3, [pc, #432]	@ (800214c <HAL_RCC_OscConfig+0x4b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x31e>
 8001fac:	4b66      	ldr	r3, [pc, #408]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb0:	4a65      	ldr	r2, [pc, #404]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x358>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x340>
 8001fc2:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc6:	4a60      	ldr	r2, [pc, #384]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fce:	4b5e      	ldr	r3, [pc, #376]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd2:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x358>
 8001fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe0:	4a59      	ldr	r2, [pc, #356]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe8:	4b57      	ldr	r3, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fec:	4a56      	ldr	r2, [pc, #344]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8001fee:	f023 0304 	bic.w	r3, r3, #4
 8001ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d015      	beq.n	8002028 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f8ce 	bl	800119c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7ff f8ca 	bl	800119c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0d7      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ee      	beq.n	8002004 <HAL_RCC_OscConfig+0x368>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff f8b8 	bl	800119c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff f8b4 	bl	800119c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e0c1      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002046:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ee      	bne.n	8002030 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	4a3a      	ldr	r2, [pc, #232]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002062:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80ad 	beq.w	80021c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206e:	4b36      	ldr	r3, [pc, #216]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b08      	cmp	r3, #8
 8002078:	d060      	beq.n	800213c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d145      	bne.n	800210e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <HAL_RCC_OscConfig+0x4b4>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f888 	bl	800119c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f884 	bl	800119c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e093      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	071b      	lsls	r3, r3, #28
 80020da:	491b      	ldr	r1, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4b4>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff f859 	bl	800119c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff f855 	bl	800119c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e064      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x452>
 800210c:	e05c      	b.n	80021c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCC_OscConfig+0x4b4>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f842 	bl	800119c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f83e 	bl	800119c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e04d      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x480>
 800213a:	e045      	b.n	80021c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e040      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002154:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <HAL_RCC_OscConfig+0x538>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d030      	beq.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d129      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d122      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800218a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	4293      	cmp	r3, r2
 800218e:	d119      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d10f      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <memset>:
 80021d8:	4402      	add	r2, r0
 80021da:	4603      	mov	r3, r0
 80021dc:	4293      	cmp	r3, r2
 80021de:	d100      	bne.n	80021e2 <memset+0xa>
 80021e0:	4770      	bx	lr
 80021e2:	f803 1b01 	strb.w	r1, [r3], #1
 80021e6:	e7f9      	b.n	80021dc <memset+0x4>

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	4d0d      	ldr	r5, [pc, #52]	@ (8002220 <__libc_init_array+0x38>)
 80021ec:	4c0d      	ldr	r4, [pc, #52]	@ (8002224 <__libc_init_array+0x3c>)
 80021ee:	1b64      	subs	r4, r4, r5
 80021f0:	10a4      	asrs	r4, r4, #2
 80021f2:	2600      	movs	r6, #0
 80021f4:	42a6      	cmp	r6, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	4d0b      	ldr	r5, [pc, #44]	@ (8002228 <__libc_init_array+0x40>)
 80021fa:	4c0c      	ldr	r4, [pc, #48]	@ (800222c <__libc_init_array+0x44>)
 80021fc:	f000 f818 	bl	8002230 <_init>
 8002200:	1b64      	subs	r4, r4, r5
 8002202:	10a4      	asrs	r4, r4, #2
 8002204:	2600      	movs	r6, #0
 8002206:	42a6      	cmp	r6, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002210:	4798      	blx	r3
 8002212:	3601      	adds	r6, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	f855 3b04 	ldr.w	r3, [r5], #4
 800221a:	4798      	blx	r3
 800221c:	3601      	adds	r6, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	0800227c 	.word	0x0800227c
 8002224:	0800227c 	.word	0x0800227c
 8002228:	0800227c 	.word	0x0800227c
 800222c:	08002280 	.word	0x08002280

08002230 <_init>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	bf00      	nop
 8002234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002236:	bc08      	pop	{r3}
 8002238:	469e      	mov	lr, r3
 800223a:	4770      	bx	lr

0800223c <_fini>:
 800223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223e:	bf00      	nop
 8002240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002242:	bc08      	pop	{r3}
 8002244:	469e      	mov	lr, r3
 8002246:	4770      	bx	lr
