
myDriver_16x2_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f3c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002100  08002100  00003100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800212c  0800212c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800212c  0800212c  0000312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002134  08002134  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002134  08002134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002138  08002138  00003138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800213c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  08002148  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08002148  0000405c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000505e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000144b  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  0000a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003d1  00000000  00000000  0000aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020083  00000000  00000000  0000adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007495  00000000  00000000  0002ae7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2486  00000000  00000000  00032311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000130c  00000000  00000000  000f47dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f5ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080020e8 	.word	0x080020e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080020e8 	.word	0x080020e8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LCD_InitStruct>:
void LCD_InitStruct(volatile GPIO_TypeDef* D4_GPIO, volatile uint16_t D4_PIN,
					volatile GPIO_TypeDef* D5_GPIO, volatile uint16_t D5_PIN,
					volatile GPIO_TypeDef* D6_GPIO, volatile uint16_t D6_PIN,
					volatile GPIO_TypeDef* D7_GPIO, volatile uint16_t D7_PIN,
					volatile GPIO_TypeDef* EN_GPIO, volatile uint16_t EN_PIN,
					volatile GPIO_TypeDef* RS_GPIO, volatile uint16_t RS_PIN){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	@ 0x40
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	461a      	mov	r2, r3
 8000500:	460b      	mov	r3, r1
 8000502:	817b      	strh	r3, [r7, #10]
 8000504:	4613      	mov	r3, r2
 8000506:	813b      	strh	r3, [r7, #8]

	LCD.DATA4_GPIOx = D4_GPIO; // saving LCD parameters to base structure
 8000508:	4a7e      	ldr	r2, [pc, #504]	@ (8000704 <LCD_InitStruct+0x210>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6013      	str	r3, [r2, #0]
	LCD.DATA4_PINx  = D4_PIN;
 800050e:	897b      	ldrh	r3, [r7, #10]
 8000510:	b29a      	uxth	r2, r3
 8000512:	4b7c      	ldr	r3, [pc, #496]	@ (8000704 <LCD_InitStruct+0x210>)
 8000514:	809a      	strh	r2, [r3, #4]

	LCD.DATA5_GPIOx = D5_GPIO;
 8000516:	4a7b      	ldr	r2, [pc, #492]	@ (8000704 <LCD_InitStruct+0x210>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6093      	str	r3, [r2, #8]
	LCD.DATA5_PINx  = D5_PIN;
 800051c:	893b      	ldrh	r3, [r7, #8]
 800051e:	b29a      	uxth	r2, r3
 8000520:	4b78      	ldr	r3, [pc, #480]	@ (8000704 <LCD_InitStruct+0x210>)
 8000522:	819a      	strh	r2, [r3, #12]

	LCD.DATA6_GPIOx = D6_GPIO;
 8000524:	4a77      	ldr	r2, [pc, #476]	@ (8000704 <LCD_InitStruct+0x210>)
 8000526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000528:	6113      	str	r3, [r2, #16]
	LCD.DATA6_PINx  = D6_PIN;
 800052a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b74      	ldr	r3, [pc, #464]	@ (8000704 <LCD_InitStruct+0x210>)
 8000532:	829a      	strh	r2, [r3, #20]

	LCD.DATA7_GPIOx = D7_GPIO;
 8000534:	4a73      	ldr	r2, [pc, #460]	@ (8000704 <LCD_InitStruct+0x210>)
 8000536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000538:	6193      	str	r3, [r2, #24]
	LCD.DATA7_PINx  = D7_PIN;
 800053a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b70      	ldr	r3, [pc, #448]	@ (8000704 <LCD_InitStruct+0x210>)
 8000542:	839a      	strh	r2, [r3, #28]

	LCD.EN_GPIOx = EN_GPIO;
 8000544:	4a6f      	ldr	r2, [pc, #444]	@ (8000704 <LCD_InitStruct+0x210>)
 8000546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000548:	6213      	str	r3, [r2, #32]
	LCD.EN_PINx  = EN_PIN;
 800054a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b6c      	ldr	r3, [pc, #432]	@ (8000704 <LCD_InitStruct+0x210>)
 8000552:	849a      	strh	r2, [r3, #36]	@ 0x24

	LCD.RS_GPIOx = RS_GPIO;
 8000554:	4a6b      	ldr	r2, [pc, #428]	@ (8000704 <LCD_InitStruct+0x210>)
 8000556:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000558:	6293      	str	r3, [r2, #40]	@ 0x28
	LCD.RS_PINx  = RS_PIN;
 800055a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b68      	ldr	r3, [pc, #416]	@ (8000704 <LCD_InitStruct+0x210>)
 8000562:	859a      	strh	r2, [r3, #44]	@ 0x2c

	while(HAL_GetTick() < 50); // according to datasheet of LCD, we have to wait 40-50ms before the initialization
 8000564:	bf00      	nop
 8000566:	f000 fd75 	bl	8001054 <HAL_GetTick>
 800056a:	4603      	mov	r3, r0
 800056c:	2b31      	cmp	r3, #49	@ 0x31
 800056e:	d9fa      	bls.n	8000566 <LCD_InitStruct+0x72>
	GPIO_RESET_PIN(LCD.RS_GPIOx, LCD.RS_PINx); // clear RS and EN pin
 8000570:	4b64      	ldr	r3, [pc, #400]	@ (8000704 <LCD_InitStruct+0x210>)
 8000572:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8000574:	b29b      	uxth	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	4b62      	ldr	r3, [pc, #392]	@ (8000704 <LCD_InitStruct+0x210>)
 800057a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800057c:	0412      	lsls	r2, r2, #16
 800057e:	619a      	str	r2, [r3, #24]
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000580:	4b60      	ldr	r3, [pc, #384]	@ (8000704 <LCD_InitStruct+0x210>)
 8000582:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000584:	b29b      	uxth	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	4b5e      	ldr	r3, [pc, #376]	@ (8000704 <LCD_InitStruct+0x210>)
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	0412      	lsls	r2, r2, #16
 800058e:	619a      	str	r2, [r3, #24]

	LCD_DATA(0x00); // configuration commands
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f8bf 	bl	8000714 <LCD_DATA>
	DELAY_MS(150);
 8000596:	2300      	movs	r3, #0
 8000598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800059a:	e01f      	b.n	80005dc <LCD_InitStruct+0xe8>
 800059c:	4b5a      	ldr	r3, [pc, #360]	@ (8000708 <LCD_InitStruct+0x214>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	61bb      	str	r3, [r7, #24]
 80005a2:	4b5a      	ldr	r3, [pc, #360]	@ (800070c <LCD_InitStruct+0x218>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a5a      	ldr	r2, [pc, #360]	@ (8000710 <LCD_InitStruct+0x21c>)
 80005a8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ac:	0c9b      	lsrs	r3, r3, #18
 80005ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005b2:	fb03 f202 	mul.w	r2, r3, r2
 80005b6:	4b55      	ldr	r3, [pc, #340]	@ (800070c <LCD_InitStruct+0x218>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4955      	ldr	r1, [pc, #340]	@ (8000710 <LCD_InitStruct+0x21c>)
 80005bc:	fba1 1303 	umull	r1, r3, r1, r3
 80005c0:	0c9b      	lsrs	r3, r3, #18
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000708 <LCD_InitStruct+0x214>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	69ba      	ldr	r2, [r7, #24]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d8f8      	bhi.n	80005c8 <LCD_InitStruct+0xd4>
 80005d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005d8:	3301      	adds	r3, #1
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005de:	2b95      	cmp	r3, #149	@ 0x95
 80005e0:	d9dc      	bls.n	800059c <LCD_InitStruct+0xa8>
	LCD_CMD(0x03);
 80005e2:	2003      	movs	r0, #3
 80005e4:	f000 f8f4 	bl	80007d0 <LCD_CMD>
	DELAY_MS(5);
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80005ec:	e01f      	b.n	800062e <LCD_InitStruct+0x13a>
 80005ee:	4b46      	ldr	r3, [pc, #280]	@ (8000708 <LCD_InitStruct+0x214>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	623b      	str	r3, [r7, #32]
 80005f4:	4b45      	ldr	r3, [pc, #276]	@ (800070c <LCD_InitStruct+0x218>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a45      	ldr	r2, [pc, #276]	@ (8000710 <LCD_InitStruct+0x21c>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	0c9b      	lsrs	r3, r3, #18
 8000600:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000604:	fb03 f202 	mul.w	r2, r3, r2
 8000608:	4b40      	ldr	r3, [pc, #256]	@ (800070c <LCD_InitStruct+0x218>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4940      	ldr	r1, [pc, #256]	@ (8000710 <LCD_InitStruct+0x21c>)
 800060e:	fba1 1303 	umull	r1, r3, r1, r3
 8000612:	0c9b      	lsrs	r3, r3, #18
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	4b3b      	ldr	r3, [pc, #236]	@ (8000708 <LCD_InitStruct+0x214>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	6a3a      	ldr	r2, [r7, #32]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	69fa      	ldr	r2, [r7, #28]
 8000624:	429a      	cmp	r2, r3
 8000626:	d8f8      	bhi.n	800061a <LCD_InitStruct+0x126>
 8000628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800062a:	3301      	adds	r3, #1
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800062e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000630:	2b04      	cmp	r3, #4
 8000632:	d9dc      	bls.n	80005ee <LCD_InitStruct+0xfa>
	LCD_CMD(0x03);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f8cb 	bl	80007d0 <LCD_CMD>
	DELAY_MS(5);
 800063a:	2300      	movs	r3, #0
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
 800063e:	e01f      	b.n	8000680 <LCD_InitStruct+0x18c>
 8000640:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <LCD_InitStruct+0x214>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <LCD_InitStruct+0x218>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a31      	ldr	r2, [pc, #196]	@ (8000710 <LCD_InitStruct+0x21c>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	0c9b      	lsrs	r3, r3, #18
 8000652:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000656:	fb03 f202 	mul.w	r2, r3, r2
 800065a:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <LCD_InitStruct+0x218>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	492c      	ldr	r1, [pc, #176]	@ (8000710 <LCD_InitStruct+0x21c>)
 8000660:	fba1 1303 	umull	r1, r3, r1, r3
 8000664:	0c9b      	lsrs	r3, r3, #18
 8000666:	085b      	lsrs	r3, r3, #1
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <LCD_InitStruct+0x214>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000676:	429a      	cmp	r2, r3
 8000678:	d8f8      	bhi.n	800066c <LCD_InitStruct+0x178>
 800067a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800067c:	3301      	adds	r3, #1
 800067e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000682:	2b04      	cmp	r3, #4
 8000684:	d9dc      	bls.n	8000640 <LCD_InitStruct+0x14c>
	LCD_CMD(0x03);
 8000686:	2003      	movs	r0, #3
 8000688:	f000 f8a2 	bl	80007d0 <LCD_CMD>
	DELAY_US(150);
 800068c:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <LCD_InitStruct+0x214>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	633b      	str	r3, [r7, #48]	@ 0x30
 8000692:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <LCD_InitStruct+0x218>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <LCD_InitStruct+0x21c>)
 8000698:	fba2 2303 	umull	r2, r3, r2, r3
 800069c:	0c9b      	lsrs	r3, r3, #18
 800069e:	2296      	movs	r2, #150	@ 0x96
 80006a0:	fb03 f202 	mul.w	r2, r3, r2
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <LCD_InitStruct+0x218>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4919      	ldr	r1, [pc, #100]	@ (8000710 <LCD_InitStruct+0x21c>)
 80006aa:	fba1 1303 	umull	r1, r3, r1, r3
 80006ae:	0c9b      	lsrs	r3, r3, #18
 80006b0:	085b      	lsrs	r3, r3, #1
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <LCD_InitStruct+0x214>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d8f8      	bhi.n	80006b6 <LCD_InitStruct+0x1c2>

	LCD_CMD(0x02);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f000 f883 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x02);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 f880 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x08);
 80006d0:	2008      	movs	r0, #8
 80006d2:	f000 f87d 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x00);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f87a 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x0C);
 80006dc:	200c      	movs	r0, #12
 80006de:	f000 f877 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x00);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f874 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x06);
 80006e8:	2006      	movs	r0, #6
 80006ea:	f000 f871 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x00);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f86e 	bl	80007d0 <LCD_CMD>
	LCD_CMD(0x01);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 f86b 	bl	80007d0 <LCD_CMD>
}
 80006fa:	bf00      	nop
 80006fc:	3740      	adds	r7, #64	@ 0x40
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000028 	.word	0x20000028
 8000708:	e000e010 	.word	0xe000e010
 800070c:	20000000 	.word	0x20000000
 8000710:	431bde83 	.word	0x431bde83

08000714 <LCD_DATA>:
/**
 * @brief Sends 4-bit data to the LCD data lines (D4–D7)
 *
 * @param data 4-bit value to send (lower nibble used)
 */
void LCD_DATA(unsigned char data){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]

	if(data & 1){
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <LCD_DATA+0x22>
		GPIO_SET_PIN(LCD.DATA4_GPIOx,   LCD.DATA4_PINx);
 8000728:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <LCD_DATA+0xb8>)
 800072a:	889b      	ldrh	r3, [r3, #4]
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <LCD_DATA+0xb8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	619a      	str	r2, [r3, #24]
 8000734:	e007      	b.n	8000746 <LCD_DATA+0x32>
	}
	else{
		GPIO_RESET_PIN(LCD.DATA4_GPIOx, LCD.DATA4_PINx);
 8000736:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <LCD_DATA+0xb8>)
 8000738:	889b      	ldrh	r3, [r3, #4]
 800073a:	b29b      	uxth	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <LCD_DATA+0xb8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	0412      	lsls	r2, r2, #16
 8000744:	619a      	str	r2, [r3, #24]
	}

	if(data & 2){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <LCD_DATA+0x4a>
		GPIO_SET_PIN(LCD.DATA5_GPIOx,   LCD.DATA5_PINx);
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <LCD_DATA+0xb8>)
 8000752:	899b      	ldrh	r3, [r3, #12]
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <LCD_DATA+0xb8>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	e007      	b.n	800076e <LCD_DATA+0x5a>
	}
	else{
		GPIO_RESET_PIN(LCD.DATA5_GPIOx, LCD.DATA5_PINx);
 800075e:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <LCD_DATA+0xb8>)
 8000760:	899b      	ldrh	r3, [r3, #12]
 8000762:	b29b      	uxth	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <LCD_DATA+0xb8>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	0412      	lsls	r2, r2, #16
 800076c:	619a      	str	r2, [r3, #24]
	}

	if(data & 4){
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	2b00      	cmp	r3, #0
 8000776:	d006      	beq.n	8000786 <LCD_DATA+0x72>
		GPIO_SET_PIN(LCD.DATA6_GPIOx,   LCD.DATA6_PINx);
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <LCD_DATA+0xb8>)
 800077a:	8a9b      	ldrh	r3, [r3, #20]
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <LCD_DATA+0xb8>)
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	619a      	str	r2, [r3, #24]
 8000784:	e007      	b.n	8000796 <LCD_DATA+0x82>
	}
	else{
		GPIO_RESET_PIN(LCD.DATA6_GPIOx, LCD.DATA6_PINx);
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <LCD_DATA+0xb8>)
 8000788:	8a9b      	ldrh	r3, [r3, #20]
 800078a:	b29b      	uxth	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <LCD_DATA+0xb8>)
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	0412      	lsls	r2, r2, #16
 8000794:	619a      	str	r2, [r3, #24]
	}

	if(data & 8){
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <LCD_DATA+0x9a>
		GPIO_SET_PIN(LCD.DATA7_GPIOx,   LCD.DATA7_PINx);
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <LCD_DATA+0xb8>)
 80007a2:	8b9b      	ldrh	r3, [r3, #28]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <LCD_DATA+0xb8>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	619a      	str	r2, [r3, #24]
	}
	else{
		GPIO_RESET_PIN(LCD.DATA7_GPIOx, LCD.DATA7_PINx);
	}
}
 80007ac:	e007      	b.n	80007be <LCD_DATA+0xaa>
		GPIO_RESET_PIN(LCD.DATA7_GPIOx, LCD.DATA7_PINx);
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <LCD_DATA+0xb8>)
 80007b0:	8b9b      	ldrh	r3, [r3, #28]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <LCD_DATA+0xb8>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	0412      	lsls	r2, r2, #16
 80007bc:	619a      	str	r2, [r3, #24]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000028 	.word	0x20000028

080007d0 <LCD_CMD>:
 * Typically used for instructions like clearing the display,
 * setting cursor position, etc
 *
 * @param cmd 4-bit command to send
 */
void LCD_CMD(unsigned char cmd){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]

	GPIO_RESET_PIN(LCD.RS_GPIOx, LCD.RS_PINx); // sending a gpio pulse for trigging the data commands
 80007da:	4b3d      	ldr	r3, [pc, #244]	@ (80008d0 <LCD_CMD+0x100>)
 80007dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80007de:	b29b      	uxth	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b3b      	ldr	r3, [pc, #236]	@ (80008d0 <LCD_CMD+0x100>)
 80007e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007e6:	0412      	lsls	r2, r2, #16
 80007e8:	619a      	str	r2, [r3, #24]
	LCD_DATA(cmd);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff91 	bl	8000714 <LCD_DATA>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 80007f2:	4b37      	ldr	r3, [pc, #220]	@ (80008d0 <LCD_CMD+0x100>)
 80007f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b35      	ldr	r3, [pc, #212]	@ (80008d0 <LCD_CMD+0x100>)
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	0412      	lsls	r2, r2, #16
 8000800:	619a      	str	r2, [r3, #24]
	DELAY_US(5);
 8000802:	4b34      	ldr	r3, [pc, #208]	@ (80008d4 <LCD_CMD+0x104>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	4b33      	ldr	r3, [pc, #204]	@ (80008d8 <LCD_CMD+0x108>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a33      	ldr	r2, [pc, #204]	@ (80008dc <LCD_CMD+0x10c>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0c9a      	lsrs	r2, r3, #18
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	441a      	add	r2, r3
 800081a:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <LCD_CMD+0x108>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	492f      	ldr	r1, [pc, #188]	@ (80008dc <LCD_CMD+0x10c>)
 8000820:	fba1 1303 	umull	r1, r3, r1, r3
 8000824:	0c9b      	lsrs	r3, r3, #18
 8000826:	085b      	lsrs	r3, r3, #1
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <LCD_CMD+0x104>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	429a      	cmp	r2, r3
 8000838:	d8f8      	bhi.n	800082c <LCD_CMD+0x5c>
	GPIO_SET_PIN(LCD.EN_GPIOx,   LCD.EN_PINx);
 800083a:	4b25      	ldr	r3, [pc, #148]	@ (80008d0 <LCD_CMD+0x100>)
 800083c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800083e:	b29a      	uxth	r2, r3
 8000840:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <LCD_CMD+0x100>)
 8000842:	6a1b      	ldr	r3, [r3, #32]
 8000844:	619a      	str	r2, [r3, #24]
	DELAY_US(5);
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <LCD_CMD+0x104>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <LCD_CMD+0x108>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a22      	ldr	r2, [pc, #136]	@ (80008dc <LCD_CMD+0x10c>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	0c9a      	lsrs	r2, r3, #18
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	441a      	add	r2, r3
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <LCD_CMD+0x108>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	491e      	ldr	r1, [pc, #120]	@ (80008dc <LCD_CMD+0x10c>)
 8000864:	fba1 1303 	umull	r1, r3, r1, r3
 8000868:	0c9b      	lsrs	r3, r3, #18
 800086a:	085b      	lsrs	r3, r3, #1
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <LCD_CMD+0x104>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	429a      	cmp	r2, r3
 800087c:	d8f8      	bhi.n	8000870 <LCD_CMD+0xa0>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <LCD_CMD+0x100>)
 8000880:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000882:	b29b      	uxth	r3, r3
 8000884:	461a      	mov	r2, r3
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <LCD_CMD+0x100>)
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	0412      	lsls	r2, r2, #16
 800088c:	619a      	str	r2, [r3, #24]
	DELAY_US(100);
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <LCD_CMD+0x104>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <LCD_CMD+0x108>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <LCD_CMD+0x10c>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	2264      	movs	r2, #100	@ 0x64
 80008a2:	fb03 f202 	mul.w	r2, r3, r2
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <LCD_CMD+0x108>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	490c      	ldr	r1, [pc, #48]	@ (80008dc <LCD_CMD+0x10c>)
 80008ac:	fba1 1303 	umull	r1, r3, r1, r3
 80008b0:	0c9b      	lsrs	r3, r3, #18
 80008b2:	085b      	lsrs	r3, r3, #1
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <LCD_CMD+0x104>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d8f8      	bhi.n	80008b8 <LCD_CMD+0xe8>
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000028 	.word	0x20000028
 80008d4:	e000e010 	.word	0xe000e010
 80008d8:	20000000 	.word	0x20000000
 80008dc:	431bde83 	.word	0x431bde83

080008e0 <LCD_clear>:

/**
 * @brief Clears the LCD screen and resets cursor position
 */
void LCD_clear(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0

	LCD_CMD(0);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ff72 	bl	80007d0 <LCD_CMD>
	LCD_CMD(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff6f 	bl	80007d0 <LCD_CMD>
	DELAY_MS(2);
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e01f      	b.n	8000938 <LCD_clear+0x58>
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <LCD_clear+0x68>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <LCD_clear+0x6c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <LCD_clear+0x70>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0c9b      	lsrs	r3, r3, #18
 800090a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800090e:	fb03 f202 	mul.w	r2, r3, r2
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <LCD_clear+0x6c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	490e      	ldr	r1, [pc, #56]	@ (8000950 <LCD_clear+0x70>)
 8000918:	fba1 1303 	umull	r1, r3, r1, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	085b      	lsrs	r3, r3, #1
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <LCD_clear+0x68>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	429a      	cmp	r2, r3
 8000930:	d8f8      	bhi.n	8000924 <LCD_clear+0x44>
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d9dc      	bls.n	80008f8 <LCD_clear+0x18>
}
 800093e:	bf00      	nop
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	e000e010 	.word	0xe000e010
 800094c:	20000000 	.word	0x20000000
 8000950:	431bde83 	.word	0x431bde83

08000954 <LCD_setCursor>:
 * @brief Sets the LCD cursor to a specific row and column
 *
 * @param row Row number (1 or 2)
 * @param column Column number (starting from 1)
 */
void LCD_setCursor(unsigned char row, unsigned char column){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	4613      	mov	r3, r2
 8000962:	71bb      	strb	r3, [r7, #6]

	unsigned char temp, low4, high4;

	if(row == 1){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d103      	bne.n	8000972 <LCD_setCursor+0x1e>
		temp = 0x80 + column - 1; // according to datasheet of LCD, we determine the row (1 or 2)
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	337f      	adds	r3, #127	@ 0x7f
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e005      	b.n	800097e <LCD_setCursor+0x2a>

	}
	else if(row == 2){
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d102      	bne.n	800097e <LCD_setCursor+0x2a>
		temp = 0xC0 + column - 1;
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	3b41      	subs	r3, #65	@ 0x41
 800097c:	73fb      	strb	r3, [r7, #15]
	}

	high4 = temp >> 4; // conversion to 4-bit type
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	091b      	lsrs	r3, r3, #4
 8000982:	73bb      	strb	r3, [r7, #14]
	low4 = temp & 0x0F;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	737b      	strb	r3, [r7, #13]
	LCD_CMD(high4);
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff1e 	bl	80007d0 <LCD_CMD>
	LCD_CMD(low4);
 8000994:	7b7b      	ldrb	r3, [r7, #13]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff1a 	bl	80007d0 <LCD_CMD>
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <LCD_writeChar>:
 *
 * Sends the character data to the LCD for display at the current cursor position
 *
 * @param data Character to display
 */
void LCD_writeChar(char data){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b090      	sub	sp, #64	@ 0x40
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]

	char low4, high4;
	low4  = data & 0x0F; // read data with bitwise masking
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 030f 	and.w	r3, r3, #15
 80009b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	high4 = data & 0xF0;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f023 030f 	bic.w	r3, r3, #15
 80009be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	GPIO_SET_PIN(LCD.RS_GPIOx, LCD.RS_PINx);
 80009c2:	4b75      	ldr	r3, [pc, #468]	@ (8000b98 <LCD_writeChar+0x1f4>)
 80009c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b73      	ldr	r3, [pc, #460]	@ (8000b98 <LCD_writeChar+0x1f4>)
 80009ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009cc:	619a      	str	r2, [r3, #24]

	LCD_DATA(high4 >> 4);
 80009ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe9c 	bl	8000714 <LCD_DATA>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 80009dc:	4b6e      	ldr	r3, [pc, #440]	@ (8000b98 <LCD_writeChar+0x1f4>)
 80009de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b6c      	ldr	r3, [pc, #432]	@ (8000b98 <LCD_writeChar+0x1f4>)
 80009e6:	6a1b      	ldr	r3, [r3, #32]
 80009e8:	0412      	lsls	r2, r2, #16
 80009ea:	619a      	str	r2, [r3, #24]
	DELAY_US(5);
 80009ec:	4b6b      	ldr	r3, [pc, #428]	@ (8000b9c <LCD_writeChar+0x1f8>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009f2:	4b6b      	ldr	r3, [pc, #428]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a6b      	ldr	r2, [pc, #428]	@ (8000ba4 <LCD_writeChar+0x200>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9a      	lsrs	r2, r3, #18
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	441a      	add	r2, r3
 8000a04:	4b66      	ldr	r3, [pc, #408]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4966      	ldr	r1, [pc, #408]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000a0a:	fba1 1303 	umull	r1, r3, r1, r3
 8000a0e:	0c9b      	lsrs	r3, r3, #18
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a16:	4b61      	ldr	r3, [pc, #388]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f8      	bhi.n	8000a16 <LCD_writeChar+0x72>
	GPIO_SET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000a24:	4b5c      	ldr	r3, [pc, #368]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000a26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000a2c:	6a1b      	ldr	r3, [r3, #32]
 8000a2e:	619a      	str	r2, [r3, #24]
	DELAY_US(5);
 8000a30:	4b5a      	ldr	r3, [pc, #360]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a36:	4b5a      	ldr	r3, [pc, #360]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a40:	0c9a      	lsrs	r2, r3, #18
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	441a      	add	r2, r3
 8000a48:	4b55      	ldr	r3, [pc, #340]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4955      	ldr	r1, [pc, #340]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000a4e:	fba1 1303 	umull	r1, r3, r1, r3
 8000a52:	0c9b      	lsrs	r3, r3, #18
 8000a54:	085b      	lsrs	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a5a:	4b50      	ldr	r3, [pc, #320]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f8      	bhi.n	8000a5a <LCD_writeChar+0xb6>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000a68:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000a6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b49      	ldr	r3, [pc, #292]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	0412      	lsls	r2, r2, #16
 8000a76:	619a      	str	r2, [r3, #24]
	DELAY_US(100);
 8000a78:	4b48      	ldr	r3, [pc, #288]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a7e:	4b48      	ldr	r3, [pc, #288]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a48      	ldr	r2, [pc, #288]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	0c9b      	lsrs	r3, r3, #18
 8000a8a:	2264      	movs	r2, #100	@ 0x64
 8000a8c:	fb03 f202 	mul.w	r2, r3, r2
 8000a90:	4b43      	ldr	r3, [pc, #268]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4943      	ldr	r1, [pc, #268]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000a96:	fba1 1303 	umull	r1, r3, r1, r3
 8000a9a:	0c9b      	lsrs	r3, r3, #18
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d8f8      	bhi.n	8000aa2 <LCD_writeChar+0xfe>

	LCD_DATA(low4);
 8000ab0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe2d 	bl	8000714 <LCD_DATA>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000aba:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000abc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b35      	ldr	r3, [pc, #212]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	0412      	lsls	r2, r2, #16
 8000ac8:	619a      	str	r2, [r3, #24]
	DELAY_US(5);
 8000aca:	4b34      	ldr	r3, [pc, #208]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	623b      	str	r3, [r7, #32]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a33      	ldr	r2, [pc, #204]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	0c9a      	lsrs	r2, r3, #18
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	441a      	add	r2, r3
 8000ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	492f      	ldr	r1, [pc, #188]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000ae8:	fba1 1303 	umull	r1, r3, r1, r3
 8000aec:	0c9b      	lsrs	r3, r3, #18
 8000aee:	085b      	lsrs	r3, r3, #1
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	6a3a      	ldr	r2, [r7, #32]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	69fa      	ldr	r2, [r7, #28]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d8f8      	bhi.n	8000af4 <LCD_writeChar+0x150>
	GPIO_SET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000b04:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	619a      	str	r2, [r3, #24]
	DELAY_US(5);
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a22      	ldr	r2, [pc, #136]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9a      	lsrs	r2, r3, #18
 8000b20:	4613      	mov	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	441a      	add	r2, r3
 8000b26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	491e      	ldr	r1, [pc, #120]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000b2c:	fba1 1303 	umull	r1, r3, r1, r3
 8000b30:	0c9b      	lsrs	r3, r3, #18
 8000b32:	085b      	lsrs	r3, r3, #1
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d8f8      	bhi.n	8000b38 <LCD_writeChar+0x194>
	GPIO_RESET_PIN(LCD.EN_GPIOx, LCD.EN_PINx);
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000b48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <LCD_writeChar+0x1f4>)
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	0412      	lsls	r2, r2, #16
 8000b54:	619a      	str	r2, [r3, #24]
	DELAY_US(100);
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a10      	ldr	r2, [pc, #64]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	2264      	movs	r2, #100	@ 0x64
 8000b6a:	fb03 f202 	mul.w	r2, r3, r2
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <LCD_writeChar+0x1fc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <LCD_writeChar+0x200>)
 8000b74:	fba1 1303 	umull	r1, r3, r1, r3
 8000b78:	0c9b      	lsrs	r3, r3, #18
 8000b7a:	085b      	lsrs	r3, r3, #1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <LCD_writeChar+0x1f8>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d8f8      	bhi.n	8000b80 <LCD_writeChar+0x1dc>
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3740      	adds	r7, #64	@ 0x40
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000028 	.word	0x20000028
 8000b9c:	e000e010 	.word	0xe000e010
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	431bde83 	.word	0x431bde83

08000ba8 <LCD_writeString>:
 *
 * Displays the string starting at the current cursor position
 *
 * @param str Pointer to the null-terminated string
 */
void LCD_writeString(char *str){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

	int i;

	for(i=0; str[i]!='\0'; i++){
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e009      	b.n	8000bca <LCD_writeString+0x22>
		LCD_writeChar(str[i]);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fef0 	bl	80009a4 <LCD_writeChar>
	for(i=0; str[i]!='\0'; i++){
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ef      	bne.n	8000bb6 <LCD_writeString+0xe>
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	@ 0x30
 8000be4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 f9cf 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f861 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 f8d1 	bl	8000d94 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_InitStruct(GPIOB, GPIO_PIN_15,
 8000bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf6:	9307      	str	r3, [sp, #28]
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <main+0xb8>)
 8000bfa:	9306      	str	r3, [sp, #24]
 8000bfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c00:	9305      	str	r3, [sp, #20]
 8000c02:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <main+0xb8>)
 8000c04:	9304      	str	r3, [sp, #16]
 8000c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0a:	9303      	str	r3, [sp, #12]
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <main+0xb8>)
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	2304      	movs	r3, #4
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <main+0xb8>)
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2302      	movs	r3, #2
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c98 <main+0xb8>)
 8000c1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c20:	481d      	ldr	r0, [pc, #116]	@ (8000c98 <main+0xb8>)
 8000c22:	f7ff fc67 	bl	80004f4 <LCD_InitStruct>
		         GPIOB, GPIO_PIN_1,
				 GPIOB, GPIO_PIN_2,
				 GPIOB, GPIO_PIN_12,
				 GPIOB, GPIO_PIN_14,
				 GPIOB, GPIO_PIN_13);
  LCD_clear();
 8000c26:	f7ff fe5b 	bl	80008e0 <LCD_clear>
  LCD_setCursor(1, 1);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fe91 	bl	8000954 <LCD_setCursor>
  LCD_writeString("LCD Driver v1.0");
 8000c32:	481a      	ldr	r0, [pc, #104]	@ (8000c9c <main+0xbc>)
 8000c34:	f7ff ffb8 	bl	8000ba8 <LCD_writeString>
  DELAY_MS(1);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e01f      	b.n	8000c7e <main+0x9e>
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <main+0xc0>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <main+0xc4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <main+0xc8>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	0c9b      	lsrs	r3, r3, #18
 8000c50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c54:	fb03 f202 	mul.w	r2, r3, r2
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <main+0xc4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4912      	ldr	r1, [pc, #72]	@ (8000ca8 <main+0xc8>)
 8000c5e:	fba1 1303 	umull	r1, r3, r1, r3
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	085b      	lsrs	r3, r3, #1
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <main+0xc0>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f8      	bhi.n	8000c6a <main+0x8a>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0dc      	beq.n	8000c3e <main+0x5e>
  LCD_setCursor(2, 1);
 8000c84:	2101      	movs	r1, #1
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fe64 	bl	8000954 <LCD_setCursor>
  LCD_writeString("by @mnane34");
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <main+0xcc>)
 8000c8e:	f7ff ff8b 	bl	8000ba8 <LCD_writeString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c92:	bf00      	nop
 8000c94:	e7fd      	b.n	8000c92 <main+0xb2>
 8000c96:	bf00      	nop
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	08002100 	.word	0x08002100
 8000ca0:	e000e010 	.word	0xe000e010
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	08002110 	.word	0x08002110

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	@ 0x50
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2234      	movs	r2, #52	@ 0x34
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 f9e6 	bl	8002090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <SystemClock_Config+0xdc>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d8c <SystemClock_Config+0xdc>)
 8000cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce4:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <SystemClock_Config+0xdc>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <SystemClock_Config+0xe0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a25      	ldr	r2, [pc, #148]	@ (8000d90 <SystemClock_Config+0xe0>)
 8000cfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <SystemClock_Config+0xe0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d14:	2310      	movs	r3, #16
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d20:	2308      	movs	r3, #8
 8000d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d24:	23b4      	movs	r3, #180	@ 0xb4
 8000d26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 ff0b 	bl	8001b54 <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d44:	f000 f886 	bl	8000e54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d48:	f000 fc24 	bl	8001594 <HAL_PWREx_EnableOverDrive>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d52:	f000 f87f 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2105      	movs	r1, #5
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fc5d 	bl	8001634 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d80:	f000 f868 	bl	8000e54 <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3750      	adds	r7, #80	@ 0x50
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a26      	ldr	r2, [pc, #152]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a1f      	ldr	r2, [pc, #124]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_GPIO_Init+0xb8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000e20:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <MX_GPIO_Init+0xbc>)
 8000e22:	f000 fb9d 	bl	8001560 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000e26:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000e2a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <MX_GPIO_Init+0xbc>)
 8000e40:	f000 f9fa 	bl	8001238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	@ 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020400 	.word	0x40020400

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <Error_Handler+0x8>

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f06:	f000 f891 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f001 f89d 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fe3b 	bl	8000be0 <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f78:	0800213c 	.word	0x0800213c
  ldr r2, =_sbss
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f80:	2000005c 	.word	0x2000005c

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f90d 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff ff50 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f917 	bl	800121e <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f8ed 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20000058 	.word	0x20000058

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000058 	.word	0x20000058

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff47 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff5c 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffb0 	bl	800118c <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e165      	b.n	8001520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8154 	bne.w	800151a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	2b02      	cmp	r3, #2
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80ae 	beq.w	800151a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001538 <HAL_GPIO_Init+0x300>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001538 <HAL_GPIO_Init+0x300>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001538 <HAL_GPIO_Init+0x300>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a58      	ldr	r2, [pc, #352]	@ (800153c <HAL_GPIO_Init+0x304>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4f      	ldr	r2, [pc, #316]	@ (8001540 <HAL_GPIO_Init+0x308>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x21a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4e      	ldr	r2, [pc, #312]	@ (8001544 <HAL_GPIO_Init+0x30c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x216>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4d      	ldr	r2, [pc, #308]	@ (8001548 <HAL_GPIO_Init+0x310>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x212>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4c      	ldr	r2, [pc, #304]	@ (800154c <HAL_GPIO_Init+0x314>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x20e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4b      	ldr	r2, [pc, #300]	@ (8001550 <HAL_GPIO_Init+0x318>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x20a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4a      	ldr	r2, [pc, #296]	@ (8001554 <HAL_GPIO_Init+0x31c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x206>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a49      	ldr	r2, [pc, #292]	@ (8001558 <HAL_GPIO_Init+0x320>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x202>
 8001436:	2306      	movs	r3, #6
 8001438:	e00c      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800143a:	2307      	movs	r3, #7
 800143c:	e00a      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800143e:	2305      	movs	r3, #5
 8001440:	e008      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 8001442:	2304      	movs	r3, #4
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 8001446:	2303      	movs	r3, #3
 8001448:	e004      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800144a:	2302      	movs	r3, #2
 800144c:	e002      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 8001452:	2300      	movs	r3, #0
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	f002 0203 	and.w	r2, r2, #3
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	4093      	lsls	r3, r2
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001464:	4935      	ldr	r1, [pc, #212]	@ (800153c <HAL_GPIO_Init+0x304>)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001472:	4b3a      	ldr	r3, [pc, #232]	@ (800155c <HAL_GPIO_Init+0x324>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001496:	4a31      	ldr	r2, [pc, #196]	@ (800155c <HAL_GPIO_Init+0x324>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800149c:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <HAL_GPIO_Init+0x324>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c0:	4a26      	ldr	r2, [pc, #152]	@ (800155c <HAL_GPIO_Init+0x324>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <HAL_GPIO_Init+0x324>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <HAL_GPIO_Init+0x324>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_GPIO_Init+0x324>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001514:	4a11      	ldr	r2, [pc, #68]	@ (800155c <HAL_GPIO_Init+0x324>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	f67f ae96 	bls.w	8001254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3724      	adds	r7, #36	@ 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40013800 	.word	0x40013800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020400 	.word	0x40020400
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40021000 	.word	0x40021000
 8001554:	40021400 	.word	0x40021400
 8001558:	40021800 	.word	0x40021800
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_PWREx_EnableOverDrive+0x90>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001624 <HAL_PWREx_EnableOverDrive+0x90>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <HAL_PWREx_EnableOverDrive+0x90>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_PWREx_EnableOverDrive+0x94>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c0:	f7ff fd48 	bl	8001054 <HAL_GetTick>
 80015c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015c6:	e009      	b.n	80015dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015c8:	f7ff fd44 	bl	8001054 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015d6:	d901      	bls.n	80015dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e01f      	b.n	800161c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_PWREx_EnableOverDrive+0x98>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e8:	d1ee      	bne.n	80015c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f0:	f7ff fd30 	bl	8001054 <HAL_GetTick>
 80015f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015f6:	e009      	b.n	800160c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015f8:	f7ff fd2c 	bl	8001054 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001606:	d901      	bls.n	800160c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e007      	b.n	800161c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <HAL_PWREx_EnableOverDrive+0x98>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001618:	d1ee      	bne.n	80015f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	420e0040 	.word	0x420e0040
 800162c:	40007000 	.word	0x40007000
 8001630:	420e0044 	.word	0x420e0044

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0cc      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b68      	ldr	r3, [pc, #416]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d90c      	bls.n	8001670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b65      	ldr	r3, [pc, #404]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b63      	ldr	r3, [pc, #396]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a58      	ldr	r2, [pc, #352]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a52      	ldr	r2, [pc, #328]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d044      	beq.n	8001754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d119      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e067      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4934      	ldr	r1, [pc, #208]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff fc96 	bl	8001054 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff fc92 	bl	8001054 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e04f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d20c      	bcs.n	800177c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490a      	ldr	r1, [pc, #40]	@ (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	@ (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fbf6 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023c00 	.word	0x40023c00
 80017f0:	40023800 	.word	0x40023800
 80017f4:	0800211c 	.word	0x0800211c
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001804:	b0a6      	sub	sp, #152	@ 0x98
 8001806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001826:	4bc8      	ldr	r3, [pc, #800]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b0c      	cmp	r3, #12
 8001830:	f200 817e 	bhi.w	8001b30 <HAL_RCC_GetSysClockFreq+0x330>
 8001834:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	08001871 	.word	0x08001871
 8001840:	08001b31 	.word	0x08001b31
 8001844:	08001b31 	.word	0x08001b31
 8001848:	08001b31 	.word	0x08001b31
 800184c:	08001879 	.word	0x08001879
 8001850:	08001b31 	.word	0x08001b31
 8001854:	08001b31 	.word	0x08001b31
 8001858:	08001b31 	.word	0x08001b31
 800185c:	08001881 	.word	0x08001881
 8001860:	08001b31 	.word	0x08001b31
 8001864:	08001b31 	.word	0x08001b31
 8001868:	08001b31 	.word	0x08001b31
 800186c:	080019eb 	.word	0x080019eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4bb6      	ldr	r3, [pc, #728]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001876:	e15f      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4bb5      	ldr	r3, [pc, #724]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x350>)
 800187a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800187e:	e15b      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4bb1      	ldr	r3, [pc, #708]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188c:	4bae      	ldr	r3, [pc, #696]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d031      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001898:	4bab      	ldr	r3, [pc, #684]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	2200      	movs	r2, #0
 80018a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80018ac:	2300      	movs	r3, #0
 80018ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80018b0:	4ba7      	ldr	r3, [pc, #668]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80018b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018b6:	462a      	mov	r2, r5
 80018b8:	fb03 f202 	mul.w	r2, r3, r2
 80018bc:	2300      	movs	r3, #0
 80018be:	4621      	mov	r1, r4
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	4aa2      	ldr	r2, [pc, #648]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80018c8:	4621      	mov	r1, r4
 80018ca:	fba1 1202 	umull	r1, r2, r1, r2
 80018ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80018d0:	460a      	mov	r2, r1
 80018d2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80018d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018d6:	4413      	add	r3, r2
 80018d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018de:	2200      	movs	r2, #0
 80018e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80018ec:	f7fe fc8a 	bl	8000204 <__aeabi_uldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4613      	mov	r3, r2
 80018f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018fa:	e064      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fc:	4b92      	ldr	r3, [pc, #584]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	2200      	movs	r2, #0
 8001904:	653b      	str	r3, [r7, #80]	@ 0x50
 8001906:	657a      	str	r2, [r7, #84]	@ 0x54
 8001908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800190a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800190e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001910:	2300      	movs	r3, #0
 8001912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001914:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001918:	4622      	mov	r2, r4
 800191a:	462b      	mov	r3, r5
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	0159      	lsls	r1, r3, #5
 8001926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800192a:	0150      	lsls	r0, r2, #5
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4621      	mov	r1, r4
 8001932:	1a51      	subs	r1, r2, r1
 8001934:	6139      	str	r1, [r7, #16]
 8001936:	4629      	mov	r1, r5
 8001938:	eb63 0301 	sbc.w	r3, r3, r1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800194a:	4659      	mov	r1, fp
 800194c:	018b      	lsls	r3, r1, #6
 800194e:	4651      	mov	r1, sl
 8001950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001954:	4651      	mov	r1, sl
 8001956:	018a      	lsls	r2, r1, #6
 8001958:	4651      	mov	r1, sl
 800195a:	ebb2 0801 	subs.w	r8, r2, r1
 800195e:	4659      	mov	r1, fp
 8001960:	eb63 0901 	sbc.w	r9, r3, r1
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001978:	4690      	mov	r8, r2
 800197a:	4699      	mov	r9, r3
 800197c:	4623      	mov	r3, r4
 800197e:	eb18 0303 	adds.w	r3, r8, r3
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	462b      	mov	r3, r5
 8001986:	eb49 0303 	adc.w	r3, r9, r3
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001998:	4629      	mov	r1, r5
 800199a:	028b      	lsls	r3, r1, #10
 800199c:	4621      	mov	r1, r4
 800199e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a2:	4621      	mov	r1, r4
 80019a4:	028a      	lsls	r2, r1, #10
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019ae:	2200      	movs	r2, #0
 80019b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80019b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80019b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80019b8:	f7fe fc24 	bl	8000204 <__aeabi_uldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4613      	mov	r3, r2
 80019c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019c6:	4b60      	ldr	r3, [pc, #384]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0c1b      	lsrs	r3, r3, #16
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	3301      	adds	r3, #1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80019d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80019dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019e8:	e0a6      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ea:	4b57      	ldr	r3, [pc, #348]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f6:	4b54      	ldr	r3, [pc, #336]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d02a      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b51      	ldr	r3, [pc, #324]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a14:	2100      	movs	r1, #0
 8001a16:	4b4e      	ldr	r3, [pc, #312]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a18:	fb03 f201 	mul.w	r2, r3, r1
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	fb00 f303 	mul.w	r3, r0, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	4a4a      	ldr	r2, [pc, #296]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a26:	fba0 1202 	umull	r1, r2, r0, r2
 8001a2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001a30:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001a32:	4413      	add	r3, r2
 8001a34:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a48:	f7fe fbdc 	bl	8000204 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a56:	e05b      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a58:	4b3b      	ldr	r3, [pc, #236]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	2200      	movs	r2, #0
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6a:	623b      	str	r3, [r7, #32]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a74:	4642      	mov	r2, r8
 8001a76:	464b      	mov	r3, r9
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	0159      	lsls	r1, r3, #5
 8001a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a86:	0150      	lsls	r0, r2, #5
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a92:	4649      	mov	r1, r9
 8001a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aac:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	00eb      	lsls	r3, r5, #3
 8001abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	4643      	mov	r3, r8
 8001aca:	18e3      	adds	r3, r4, r3
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	464b      	mov	r3, r9
 8001ad0:	eb45 0303 	adc.w	r3, r5, r3
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	028b      	lsls	r3, r1, #10
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aec:	4621      	mov	r1, r4
 8001aee:	028a      	lsls	r2, r1, #10
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001af8:	2200      	movs	r2, #0
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	61fa      	str	r2, [r7, #28]
 8001afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b02:	f7fe fb7f 	bl	8000204 <__aeabi_uldivmod>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0f1b      	lsrs	r3, r3, #28
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b2e:	e003      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3798      	adds	r7, #152	@ 0x98
 8001b40:	46bd      	mov	sp, r7
 8001b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	017d7840 	.word	0x017d7840

08001b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e28d      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8083 	beq.w	8001c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b74:	4b94      	ldr	r3, [pc, #592]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d019      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b80:	4b91      	ldr	r3, [pc, #580]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b88      	ldr	r3, [pc, #544]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b84      	ldr	r3, [pc, #528]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x124>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e25a      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x90>
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7b      	ldr	r2, [pc, #492]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xcc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xb4>
 8001bee:	4b76      	ldr	r3, [pc, #472]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xcc>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b6c      	ldr	r3, [pc, #432]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6b      	ldr	r2, [pc, #428]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fa14 	bl	8001054 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fa10 	bl	8001054 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e21f      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b61      	ldr	r3, [pc, #388]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xdc>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fa00 	bl	8001054 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f9fc 	bl	8001054 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	@ 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e20b      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b57      	ldr	r3, [pc, #348]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x104>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06f      	beq.n	8001d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c86:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d017      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c92:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb6:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x186>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1d3      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4937      	ldr	r1, [pc, #220]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_RCC_OscConfig+0x278>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f9a9 	bl	8001054 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff f9a5 	bl	8001054 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1b4      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4925      	ldr	r1, [pc, #148]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_RCC_OscConfig+0x278>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f988 	bl	8001054 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff f984 	bl	8001054 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e193      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d036      	beq.n	8001de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d016      	beq.n	8001da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f968 	bl	8001054 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff f964 	bl	8001054 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e173      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x234>
 8001da6:	e01b      	b.n	8001de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff f951 	bl	8001054 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e00e      	b.n	8001dd4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff f94d 	bl	8001054 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d907      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e15c      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	42470000 	.word	0x42470000
 8001dd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b8a      	ldr	r3, [pc, #552]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ea      	bne.n	8001db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8097 	beq.w	8001f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b83      	ldr	r3, [pc, #524]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b7f      	ldr	r3, [pc, #508]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a7e      	ldr	r2, [pc, #504]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b79      	ldr	r3, [pc, #484]	@ (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b76      	ldr	r3, [pc, #472]	@ (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	@ (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f90d 	bl	8001054 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff f909 	bl	8001054 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e118      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b6c      	ldr	r3, [pc, #432]	@ (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x31e>
 8001e64:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e68:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x358>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x340>
 8001e7a:	4b61      	ldr	r3, [pc, #388]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7e:	4a60      	ldr	r2, [pc, #384]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e86:	4b5e      	ldr	r3, [pc, #376]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0x358>
 8001e94:	4b5a      	ldr	r3, [pc, #360]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e98:	4a59      	ldr	r2, [pc, #356]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea0:	4b57      	ldr	r3, [pc, #348]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea4:	4a56      	ldr	r2, [pc, #344]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d015      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f8ce 	bl	8001054 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f8ca 	bl	8001054 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0d7      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ee      	beq.n	8001ebc <HAL_RCC_OscConfig+0x368>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f8b8 	bl	8001054 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f8b4 	bl	8001054 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0c1      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	4b40      	ldr	r3, [pc, #256]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ee      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b3b      	ldr	r3, [pc, #236]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4a3a      	ldr	r2, [pc, #232]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80ad 	beq.w	8002080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f26:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d060      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d145      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b33      	ldr	r3, [pc, #204]	@ (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f888 	bl	8001054 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f884 	bl	8001054 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e093      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	071b      	lsls	r3, r3, #28
 8001f92:	491b      	ldr	r1, [pc, #108]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f859 	bl	8001054 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff f855 	bl	8001054 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e064      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x452>
 8001fc4:	e05c      	b.n	8002080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f842 	bl	8001054 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff f83e 	bl	8001054 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e04d      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x480>
 8001ff2:	e045      	b.n	8002080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e040      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000
 8002008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800200c:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <HAL_RCC_OscConfig+0x538>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d030      	beq.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d129      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d122      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002044:	4293      	cmp	r3, r2
 8002046:	d119      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	3b01      	subs	r3, #1
 8002056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d10f      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <memset>:
 8002090:	4402      	add	r2, r0
 8002092:	4603      	mov	r3, r0
 8002094:	4293      	cmp	r3, r2
 8002096:	d100      	bne.n	800209a <memset+0xa>
 8002098:	4770      	bx	lr
 800209a:	f803 1b01 	strb.w	r1, [r3], #1
 800209e:	e7f9      	b.n	8002094 <memset+0x4>

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	4d0d      	ldr	r5, [pc, #52]	@ (80020d8 <__libc_init_array+0x38>)
 80020a4:	4c0d      	ldr	r4, [pc, #52]	@ (80020dc <__libc_init_array+0x3c>)
 80020a6:	1b64      	subs	r4, r4, r5
 80020a8:	10a4      	asrs	r4, r4, #2
 80020aa:	2600      	movs	r6, #0
 80020ac:	42a6      	cmp	r6, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	4d0b      	ldr	r5, [pc, #44]	@ (80020e0 <__libc_init_array+0x40>)
 80020b2:	4c0c      	ldr	r4, [pc, #48]	@ (80020e4 <__libc_init_array+0x44>)
 80020b4:	f000 f818 	bl	80020e8 <_init>
 80020b8:	1b64      	subs	r4, r4, r5
 80020ba:	10a4      	asrs	r4, r4, #2
 80020bc:	2600      	movs	r6, #0
 80020be:	42a6      	cmp	r6, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c8:	4798      	blx	r3
 80020ca:	3601      	adds	r6, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d2:	4798      	blx	r3
 80020d4:	3601      	adds	r6, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	08002134 	.word	0x08002134
 80020dc:	08002134 	.word	0x08002134
 80020e0:	08002134 	.word	0x08002134
 80020e4:	08002138 	.word	0x08002138

080020e8 <_init>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	bf00      	nop
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr

080020f4 <_fini>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr
